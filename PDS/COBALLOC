         TITLE 'COBALLOC - DYNAMIC SYSOUT ALLOCATION FROM COBOL'
*      |--------------------------------------------------------------|
*      |                                                              |
*      |  PROGRAM ID:     COBALLOC (SYSOUT DYNAMIC ALLOCATION)        |
*      |  AUTHOR:         R. D. MORTON.                               |
*      |  DATE:           APRIL 29, 1982.                             |
*      |                                                              |
*      |  THIS IS A COPY OF CBLALLOC WITHOUT WTO'S.                   |
*      |  THIS SUBROUTINE WILL ACCEPT THE CALL PARAMETER LIST FROM    |
*      |     A COBOL PROGRAM AND BUILDS THE REQUIRED TEXT BLOCKS TO   |
*      |     ISSUE A SVC 99 DYNAMIC ALLOCATION CALL TO MVS. ONLY      |
*      |     SYSOUT TYPE ALLOCATIONS ARE SUPPORTED CURRENTLY.         |
*      |  SAMPLE CALLING SEQUENCE:                                    |
*      |     LINKAGE SECTION.                                         |
*      |     01  ALLOCATE-PARMS                                       |
*      |         05  ALLOC-VERB      PIC X.                           |
*      |           88  ALLOCATE      VALUE IS 'A'.                    |
*      |           88  UNALLOCATE    VALUE IS 'U'.                    |
*      |         05  ALLOC-DDNAME    PIC X(8).                        |
*      |         05  ALLOC-CLASS     PIC X.                           |
*      |         05  ALLOC-COPIES    PIC 9(3).                        |
*      |         05  ALLOC-DEST      PIC X(5).                        |
*      |         05  ALLOC-FREE      PIC X.                           |
*      |           88  FREE-CLOSE    VALUE IS 'Y'.                    |
*      |         05  ALLOC-FORM      PIC X(4).                        |
*      |         05  ALLOC-FCB       PIC X(4).                        |
*      |         05  ALLOC-RESERVED  PIC X(12).                       |
*      |         05  ALLOC-RETURN-CODE PIC 99.                        |
*      |           88  RET-OK        VALUE 00.                        |
*      |           88  RET-FAIL-VERB VALUE 01.                        |
*      |           88  RET-FAIL-ENV  VALUE 04.                        |
*      |           88  RET-FAIL-REQ  VALUE 08.                        |
*      |           88  RET-FAIL-PARM VALUE 12.                        |
*      |         05  ALLOC-ERROR     PIC 9999.                        |
*      |         05  ALLOC-INFO      PIC 9999.                        |
*      |         .                                                    |
*      |         .                                                    |
*      |     PROCEDURE DIVISION                                       |
*      |     CALL 'COBALLOC ' USING ALLOCATE-PARMS.                   |
*      |                                                              |
*      |                                                              |
*      |--------------------------------------------------------------|
         EJECT
R0       EQU   0                    /*    NOT USED                   */
R1       EQU   1                    /* PARM ADDR. DYNALLOC PARM PTR  */
R2       EQU   2                    /* CVB WORK, VAR PARM INDEX      */
R3       EQU   3                    /* TEXT BLOCK ADDRESSES          */
R4       EQU   4                    /* WORK REGISTER.                */
R5       EQU   5                    /*    NOT USED                   */
R6       EQU   6                    /* ADDRESS OF CALLERS I/O AREA   */
R7       EQU   7                    /*    NOT USED                   */
R8       EQU   8                    /*    NOT USED                   */
R9       EQU   9                    /*    NOT USED                   */
R10      EQU   10                   /*    NOT USED                   */
R11      EQU   11                   /* TEMP BASE REG                 */
R12      EQU   12                   /* BASE REGISTER                 */
R13      EQU   13                   /* SAVE AREA POINTER             */
R14      EQU   14                   /* RETURN ADDRESS                */
R15      EQU   15                   /* ENTRY ADDRESS, DYNALLOC RTCD  */
         EJECT
PARMLIST DSECT                      /* OVERLAY FOR USERS I/O AREA    */
         USING PARMLIST,R6          /* R6 IS BASE FOR USER I/O AREA  */
*                                   /*                               */
USERPARM DS    0CL37                /*                               */
USERVERB DS    C                    /* A=ALLOC, U=UNALLOC            */
USERDDNM DS    CL8                  /* DDNAME                        */
USERCLAS DS    C                    /* CLASS                         */
USERCOPY DS    CL3                  /* NUMBER OF COPIES              */
USERDEST DS    CL5                  /* DESTINATION ID                */
USERFREE DS    C                    /* Y MEANS USE FREE=CLOSE        */
USERFORM DS    CL4                  /* FORM NAME                     */
USERFCB  DS    CL4                  /* FCB NAME                      */
USERRES  DS    CL12                 /* RESERVED FOR EXPANSION        */
USERRET  DS    CL2                  /* USER RETURN CODE              */
USERERR  DS    CL4                  /* USER ERROR CODE               */
USERINFO DS    CL4                  /* USER ERROR INFO CODE          */
         EJECT
COBALLOC CSECT                      /* IDENTIFY ENTRY POINT          */
*                                   /*                               */
         SAVE  (14,12)              /* SAVE CALLER'S REGISTERS       */
         BALR  R12,0                /* LOAD R12 AS BASE REGISTER     */
         USING *,12                 /* TELL ASSEMBLER WHO'S BOSS     */
         ST    R13,SAVEAREA+4       /* SAVE ADDR OF CALLER'S SAVEAREA*/
         LA    R11,SAVEAREA         /* GET ADDR OF MY SAVEAREA       */
         ST    R11,8(R13)           /* TELL CALLER WHERE MY AREA IS  */
         LR    R13,R11              /* GET ADDR OF MY SAVEAREA IN R13*/
         B     GOON                 /*                               */
         SPACE 3                    /*                               */
         DC    CL8'COBALLOC'        /* PROGRAM NAME TO PRT ON DUMPS  */
*                                   /*                               */
GOON     EQU   *                    /*                               */
         L     R6,0(R1)             /* GET PARM ADDRESS IN R6        */
         CLI   USERVERB,C'A'        /* TEST FOR ALLOCATE VERB        */
         BE    ALLOCATE             /* BRANCH IF ALLOCATE            */
         CLI   USERVERB,C'U'        /* TEST FOR UNALLOCATE VERB      */
         BE    UNALLOC              /* BRANCH IF UNALLOCATE          */
         MVC   USERRET,=C'01'       /* SET INVALID VERB CODE         */
         B     RETURN               /* RETURN TO USER                */
         SPACE 3                    /*                               */
ALLOCATE EQU   *                    /* START BUILDING ALLOC PARM     */
         SPACE 1                    /*                               */
TDDNAME0 EQU   *                    /* TEST USERS DDNAME FIELD       */
         CLC   USERDDNM,BLANKS      /* IS DDNAME BLANK               */
         BNE   TDDNAME1             /* NO-GO SET DDNAME              */
*        MVC   DDNAME,=C'SYSOUT  '  /* SET DEFAULT OF SYSOUT         */
         MVC   USERDDNM,=C'SYSOUT  ' * SET DEFAULT OF SYSOUT         */
*        B     TDDNAME9             /* GO TO END OF DDNAME TESTS     */
TDDNAME1 MVC   DDNAME,USERDDNM      /* MOVE USERS DDNAME TO TEXT BLK */
TDDNAME9 EQU   *                    /*                               */
         SPACE 1                    /*                               */
TCLASS0  EQU   *                    /* TEST USERS CLASS FIELD        */
         CLI   USERCLAS,C' '        /* IS CLASS  BLANK               */
         BNE   TCLASS1              /* NO-GO SET CLASS CODE          */
*        MVI   CLASS,C'A'           /* SET DEFAULT CLASS=A           */
         MVI   USERCLAS,C'A'        /* SET DEFAULT CLASS=A           */
*        B     TCLASS9              /* GO TO END OF CLASS TESTS      */
TCLASS1  MVC   CLASS,USERCLAS       /* MOVE USERS CLASS TO TEXT BLK  */
TCLASS9  EQU   *                    /*                               */
         SPACE 1                    /*                               */
TCOPIES0 EQU   *                    /* TEST USERS COPIES FIELD       */
         CLC   USERCOPY,BLANKS      /* IS COPIES BLANK               */
         BNE   TCOPIES2             /* NO-GO TEST FOR NUMERICS       */
TCOPIES1 LA    R2,1                 /* SET DEFAULT COPIES=1          */
         B     TCOPIES3             /* GO TO END OF COPIES TESTS     */
TCOPIES2 EQU   *                    /*                               */
         LA    R4,256               /* GET 256 IN R4                 */
         PACK  CVBAREA,USERCOPY     /* PACK THE USER COPIES FIELD    */
         CVB   R2,CVBAREA           /* CONVERT COPIES TO BINARY      */
         LTR   R2,R2                /* SET CONDITION CODE            */
         BNP   TCOPIES1             /* IF NOT POSITIVE SET DEFAULT 1 */
         CR    R2,R4                /* COMPARE COPIES TO 256         */
         BL    TCOPIES3             /* BRANCH IF COPIES LESS THAN 256*/
         LA    R2,255               /* SET COPIES TO 255             */
TCOPIES3 STC   R2,COPIES            /* STORE LOW BYTE IN COPIES PARM */
         CVD   R2,CVBAREA           /* CONVERT MODIFIED COPIES TO PD.*/
         UNPK  USERCOPY,CVBAREA+6(2) * UNPACK COPIES INTO USER AREA  */
         OI    USERCOPY+2,X'F0'     /* FORCE NO SIGN IN LAST CHAR    */
TCOPIES9 EQU   *                    /*                               */
         SPACE 1                    /*                               */
TDEST0   EQU   *                    /* TEST USERS DEST FIELD         */
         CLC   USERDEST,BLANKS      /* IS DEST FIELD BLANK           */
         BNE   TDEST1               /* NO-GO SET DEST CODE           */
*        MVC   DEST,=C'LOCAL'       /* SET DEFAULT DEST=LOCAL        */
         MVC   USERDEST,=C'LOCAL'   /*                               */
*        B     TDEST9               /* GO TO END OF DEST TESTS       */
TDEST1   MVC   DEST,USERDEST        /* MOVE USERS DEST TO TEXT BLK   */
TDEST9   EQU   *                    /*                               */
         SPACE 1                    /*                               */
*  TEST OPTIONAL FIELDS TO SEE IF ANY ARE NONBLANK                   */
OPTTEST  CLI   USERFREE,C'Y'        /* TEST FOR FREE=CLOSE           */
         BE    TOPTION              /* BRANCH IF CLOSE SPECIFIED     */
         CLI   USERFORM,C' '        /* TEST IF FORM NAME BLANK       */
         BNE   TOPTION              /* BRANCH IF FORM SPECIFIED      */
         CLI   USERFCB,C' '         /* TEST IF FCB  NAME BLANK       */
         BNE   TOPTION              /* BRANCH IF FCB  SPECIFIED      */
         SPACE 1                    /*                               */
*  NO OPTIONAL PARMS WERE SPECIFIED- SET END OF PARM BIT             */
         MVI   ALLOCPRV-4,X'80'     /*  SET AT END OF FIXED PARM LIST*/
         B     ALLOCSVC             /* GO ISSUE ALLOCATE SVC 99      */
         SPACE 1                    /*                               */
*  ONE OR MORE OPTIONAL PARMS WERE SPECIFIED
TOPTION  LA    R2,ALLOCPRV-4        /* GET START OF VAR PARM AREA    */
         MVI   ALLOCPRV-4,X'00'     /* RESET END OF LIST BIT         */
         SPACE 1                    /*                               */
*                                   /*                               */
TFREE0   CLI   USERFREE,C'Y'        /* TEST FOR FREE=CLOSE           */
         BNE   TFORM0               /* NO FREE=CLOSE, GO TEST FORM   */
         LA    R2,4(R2)             /* ADD 4 TO OFFSET ADDRESS       */
         LA    R3,TXFREE            /* GET ADDRESS OF FREE=CLOSE TEXT*/
         ST    R3,0(R2)             /* STORE IN VARIABLE PART OF PARM*/
         SPACE 1                    /*                               */
TFORM0   EQU   *                    /*                               */
         CLI   USERFORM,C' '        /* IS FORM NAME SPECIFIED        */
         BE    TFCB0                /* NO-GO TEST FOR FCB            */
         MVC   FORM,USERFORM        /* MOVE FORM NAME TO TEXT BLK    */
         LA    R2,4(R2)             /* ADD 4 TO OFFSET ADDRESS       */
         LA    R3,TXFORM            /* GET ADDRESS OF FORM TEXT BLK  */
         ST    R3,0(R2)             /* STORE IN VARIABLE PART OF PARM*/
         SPACE 1                    /*                               */
TFCB0    EQU   *                    /*                               */
         CLI   USERFCB,C' '         /* IS FCB  NAME SPECIFIED        */
         BE    SETEND               /* NO-GO SET END OF PARM LIST BIT*/
         MVC   FCB,USERFCB          /* MOVE FCB  NAME TO TEXT BLK    */
         LA    R2,4(R2)             /* ADD 4 TO OFFSET ADDRESS       */
         LA    R3,TXFCB             /* GET ADDRESS OF FCB  TEXT BLK  */
         ST    R3,0(R2)             /* STORE IN VARIABLE PART OF PARM*/
         SPACE 1                    /*                               */
SETEND   MVI   0(R2),X'80'          /* SET END OF PARM LIST BIT      */
         SPACE 2                    /*                               */
* ISSUE DYNALLOC INSTRUCTION AND REPORT COMPLETION STATUS            */
ALLOCSVC EQU   *                    /* PREPARE TO ISSUE SVC 99 ALLOC */
         LA    R1,DYNALLOC          /* LOAD ADDRESS OF PARM PTR IN R1*/
         DYNALLOC                   /* ISSUE SVC99 DYNAMIC ALLOCATE  */
         CVD   R15,CVBAREA          /* CONVERT RETURN CODE TO PD.    */
         UNPK  AMSGRET,CVBAREA+6(2) /* UNKP RETURN CODE INTO MSG     */
         OI    AMSGRET+1,X'F0'      /* FORCE NO SIGN IN LAST CHAR    */
         MVC   USERRET,AMSGRET      /* MOVE RETURN CODE TO USER      */
         LTR   R15,R15              /* SET CONDITION CODE            */
         BP    ALOCFAIL             /* GO WRITE FAILED MESSAGE       */
*        WTO   MF=(E,ALOCOK)        /* WRITE ALLOCATION SUCCESSFUL   */
*        DOM   MSG=(1),REPLY=YES    /* DELETE MSG FROM CONSOLE       */
         B     ALLOC1               /*                               */
ALOCFAIL WTO   MF=(E,ALOCNO)        /* WRITE ALLOCATION FAILED       */
*        DOM   MSG=(1),REPLY=YES    /* DELETE MSG FROM CONSOLE       */
ALLOC1   EQU   *
         L     R15,ALLOCERR         /* GET ERROR AND INFO CODES      */
         LR    R4,R15               /* COPY R15 INTO R4              */
         SRL   R4,16                /* SHIFT ERR CODE TO RIGHT       */
         CVD   R4,CVBAREA           /* CONVERT ERR CODE TO PD.       */
         UNPK  AMSGERR,CVBAREA+5(3) /* UNKP ERROR CODE INTO MESSAGE  */
         OI    AMSGERR+3,X'F0'      /* FORCE NO SIGN IN LAST CHAR    */
         MVC   USERERR,AMSGERR      /* MOVE ERROR CODE TO USER       */
         SLL   R15,16               /* CLEAR HIGH                    */
         SRL   R15,16               /*    BITS OF R15 (INFO CODE)    */
         CVD   R15,CVBAREA          /* CONVERT INFO CODE TO PD.      */
         UNPK  AMSGINFO,CVBAREA+5(3)   UNKP INFO CODE INTO MESSAGE   */
         OI    AMSGINFO+3,X'F0'     /* FORCE NO SIGN IN LAST CHAR    */
         MVC   USERINFO,AMSGINFO    /* MOVE INFO  CODE TO USER       */
         MVC   AMSGDDNM,USERDDNM    /* MOVE DDNAME TO MESSAGE        */
         MVC   AMSGCLAS,USERCLAS    /* MOVE CLASS TO MESSAGE         */
         MVC   AMSGCOPY,USERCOPY    /* MOVE COPIES TO MESSAGE        */
         MVC   AMSGDEST,USERDEST    /* MOVE DEST TO MESSAGE          */
         MVC   AMSGFREE,USERFREE    /* MOVE FREE=CLOSE TO MESSAGE    */
         MVC   AMSGFORM,USERFORM    /* MOVE FORM TO MESSAGE          */
         MVC   AMSGFCB,USERFCB      /* MOVE FCB TO MESSAGE           */
*        WTO   MF=(E,ALLOCMSG)      /* WRITE ALLOCATION MESSAGE      */
*        DOM   MSG=(1),REPLY=YES    /* DELETE MSG FROM CONSOLE       */
         B     RETURN               /* RETURN TO USER                */
         SPACE 3                    /*                               */
* SET UP FOR DYNAMIC DE-ALLOCATION                                   */
UNALLOC  EQU   *                    /* START BUILDING UNALLOC PARM   */
         SPACE 1                    /*                               */
TDDNM0   EQU   *                    /* TEST USERS DDNAME FIELD       */
         CLC   USERDDNM,BLANKS      /* IS DDNAME BLANK               */
         BNE   TDDNM1               /* NO-GO SET DDNAME              */
         MVC   DDNAME,=C'SYSOUT  '  /* SET DEFAULT OF SYSOUT         */
         MVC   USERDDNM,=C'SYSOUT  ' * SET DEFAULT OF SYSOUT         */
         B     TDDNM9               /* GO TO END OF DDNAME TESTS     */
TDDNM1   MVC   DDNAME,USERDDNM      /* MOVE USERS DDNAME TO TEXT BLK */
TDDNM9   EQU   *                    /*                               */
         SPACE 1                    /*                               */
* ISSUE DYNALLOC INSTRUCTION AND REPORT COMPLETION STATUS            */
UNALLOCS EQU   *                    /* PREPARE TO ISSUE SVC 99 ALLOC */
         LA    R1,DYNUNALL          /* LOAD ADDRESS OF PARM PTR IN R1*/
         DYNALLOC                   /* ISSUE SVC99 DYNAMIC ALLOCATE  */
         CVD   R15,CVBAREA          /* CONVERT RETURN CODE TO PD.    */
         UNPK  UMSGRET,CVBAREA+6(2) /* UNKP RETURN CODE INTO MSG     */
         OI    UMSGRET+1,X'F0'      /* FORCE NO SIGN IN LAST CHAR    */
         MVC   USERRET,UMSGRET      /* MOVE RETURN CODE TO USER      */
         LTR   R15,R15              /* SET CONDITION CODE            */
         BP    UNALFAIL             /* GO WRITE FAILED MESSAGE       */
*        WTO   MF=(E,UNALOK)        /* WRITE UNALLOCATION SUCCESSFUL */
*        DOM   MSG=(1),REPLY=YES    /* DELETE MSG FROM CONSOLE       */
         B     UNALLOC1             /*                               */
UNALFAIL WTO   MF=(E,UNALNO)        /* WRITE UNALLOCATION FAILED     */
*        DOM   MSG=(1),REPLY=YES    /* DELETE MSG FROM CONSOLE       */
UNALLOC1 EQU   *
         L     R15,UNALLERR         /* GET ERROR AND INFO CODE       */
         LR    R4,R15               /* COPY R15 INTO R4              */
         SRL   R4,16                /* SHIFT ERR CODE TO RIGHT       */
         CVD   R4,CVBAREA           /* CONVERT ERR CODE TO PD.       */
         UNPK  UMSGERR,CVBAREA+5(3) /* UNKP ERROR CODE INTO MESSAGE  */
         OI    UMSGERR+3,X'F0'      /* FORCE NO SIGN IN LAST CHAR    */
         MVC   USERERR,UMSGERR      /* MOVE ERROR CODE TO USER       */
         SLL   R15,16               /* CLEAR HIGH                    */
         SRL   R15,16               /*    BITS OF R15 (INFO CODE)    */
         CVD   R15,CVBAREA          /* CONVERT INFO CODE TO PD.      */
         UNPK  UMSGINFO,CVBAREA+5(3)   UNKP INFO CODE INTO MESSAGE   */
         OI    UMSGINFO+3,X'F0'     /* FORCE NO SIGN IN LAST CHAR    */
         MVC   USERINFO,UMSGINFO    /* MOVE INFO CODE TO USER        */
         MVC   UMSGDDNM,USERDDNM    /* MOVE DDNAME TO MESSAGE        */
*        WTO   MF=(E,UNALLMSG)      /* WRITE UNALLOCATION MESSAGE    */
*        DOM   MSG=(1),REPLY=YES    /* DELETE MSG FROM CONSOLE       */
         B     RETURN               /* RETURN TO USER                */
         SPACE 1                    /*                               */
*                                   /*                               */
RETURN   L     R13,SAVEAREA+4       /* RESTORE ADDR OF CALLERS SAVEAREA
         RETURN (14,12),RC=0        /* RESTORE REGS AND RETURN       */
*
         SPACE 3                    /*                               */
         CNOP  0,8                  /*                               */
         DC    CL8'SAVEAREA'        /*                               */
SAVEAREA DC    18F'0'               /* REGISTER SAVE AREA            */
         SPACE 2                    /*                               */
CVBAREA  DC    PL8'1'               /* WORK AREA FOR COPIES PARM     */
BLANKS   DC    8C' '                /* DEFINE 8 BLANKS               */
         CNOP  0,4                  /*                               */
         DC    CL8'ALLOCBLK'        /*                               */
         SPACE 3                    /*                               */
DYNALLOC DC    X'80'                /* POINTER TO DYN ALLOC REQ BLK  */
         DC    AL3(ALLOCBLK)        /*  TO BE LOADED IN R1           */
         SPACE 3                    /*                               */
ALLOCBLK DS    0CL20                /* DYNAMIC ALLOCATION REQ BLOCK  */
         DC    X'14'                /* LENGTH OF REQUEST BLOCK       */
ALLOCVB  DC    X'01'                /* ALLOCATE VERB = '01'          */
ALLOCF1  DC    B'0001000000000000'  /* ALLOCATE FLAGS 1 FIELD        */
ALLOCERR DC    X'0000'              /* ERROR RETURN CODE             */
ALLOCINF DC    X'0000'              /* INFO RETURN CODE              */
ALLOCTX  DC    AL4(ALLOCPRM)        /* POINTER TO ALLOCATE PARM LIST */
         DC    X'00000000'          /* RESERVED                      */
ALLOCF2  DC    X'00000000'          /* ALLOCATE FLAGS 2              */
         SPACE 3                    /*                               */
ALLOCPRM DS    0CL16                /* ALLOCATE PARM LIST            */
         DC    AL4(TXDDNAME)        /* POINTER TO DDNAME TEXT BLOCK  */
         DC    AL4(TXCLASS)         /* POINTER TO CLASS  TEXT BLOCK  */
         DC    AL4(TXCOPIES)        /* POINTER TO COPIES TEXT BLOCK  */
         DC    AL4(TXDEST)          /* POINTER TO DEST   TEXT BLOCK  */
ALLOCPRV EQU   *                    /* START OF VARIABLE PARM LIST   */
         DC    AL4(0)               /* DEFINE AREA FOR 4 MORE PARMS  */
         DC    AL4(0)               /* DEFINE AREA FOR 4 MORE PARMS  */
         DC    AL4(0)               /* DEFINE AREA FOR 4 MORE PARMS  */
         DC    AL4(0)               /* DEFINE AREA FOR 4 MORE PARMS  */
         SPACE 3                    /*                               */
         CNOP  0,4                  /*                               */
         DC    CL8'UNALLBLK'        /*                               */
DYNUNALL DC    X'80'                /* POINTER TO DYN UNALLOC REQ BLK*/
         DC    AL3(UNALLBLK)        /*  TO BE LOADED IN R1           */
         SPACE 3                    /*                               */
UNALLBLK DS    0CL20                /* DYNAMIC UNALLOCATE REQ BLOCK  */
         DC    X'14'                /* LENGTH OF REQUEST BLOCK       */
UNALLVB  DC    X'02'                /* UNALLOCATE VERB = '02'        */
UNALLF1  DC    B'0001000000000000'  /* UNALLOC FLAGS 1 FIELD         */
UNALLERR DC    X'0000'              /* ERROR RETURN CODE             */
UNALLINF DC    X'0000'              /* INFO RETURN CODE              */
UNALLTX  DC    AL4(UNALLPRM)        /* POINTER TO UNALLOC PARM LIST  */
         DC    X'00000000'          /* RESERVED                      */
UNALLF2  DC    X'00000000'          /* UNALLOCATE FLAGS 2            */
         SPACE 3                    /*                               */
UNALLPRM DS    0CL4                 /* UNALLOCATE PARM LIST          */
         DC    X'80'                /* SET HIGH ORDER BIT            */
         DC    AL3(TXDDNAME)        /* POINTER TO DDNAME TEXT BLOCK  */
         SPACE 3                    /*                               */
***********************************************************************
*        DDNAME TEXT BLOCK                                           *
***********************************************************************
TXDDNAME DC    X'0001'              /* DDNAME TEXT KEY = '0001'      */
         DC    X'0001'              /* NUMBER OF FIELDS = 1          */
         DC    X'0008'              /* LENGTH OF PARM                */
DDNAME   DC    C'SYSOUT  '          /* DDNAME                        */
         SPACE 3                    /*                               */
***********************************************************************
*        CLASS TEXT BLOCK                                            *
***********************************************************************
TXCLASS  DC    X'0018'              /* CLASS  TEXT KEY = '0018'      */
         DC    X'0001'              /* NUMBER OF FIELDS = 1          */
         DC    X'0001'              /* LENGTH OF PARM                */
CLASS    DC    C'A'                 /* CLASS                         */
         SPACE 3                    /*                               */
***********************************************************************
*        COPIES TEXT BLOCK                                           *
***********************************************************************
TXCOPIES DC    X'001D'              /* COPIES TEXT KEY = '001D'      */
         DC    X'0001'              /* NUMBER OF FIELDS = 1          */
         DC    X'0001'              /* LENGTH OF PARM                */
COPIES   DC    X'01'                /* NUMBER OF COPIES              */
         SPACE 3                    /*                               */
***********************************************************************
*        DESTINATION TEXT BLOCK                                      *
***********************************************************************
TXDEST   DC    X'0058'              /* DEST TEXT KEY = '0058'        */
         DC    X'0001'              /* NUMBER OF FIELDS = 1          */
         DC    X'0005'              /* LENGTH OF PARM                */
DEST     DC    C'LOCAL'             /* DESTINATION ID                */
         SPACE 3                    /*                               */
***********************************************************************
*        FORMS TEXT BLOCK                                            *
***********************************************************************
TXFORM   DC    X'001A'              /* FORM TEXT KEY = '001A'        */
         DC    X'0001'              /* NUMBER OF FIELDS = 1          */
         DC    X'0004'              /* LENGTH OF PARM                */
FORM     DC    C'    '              /* FORM NAME                     */
         SPACE 3                    /*                               */
***********************************************************************
*        FREE=CLOSE TEXT BLOCK                                       *
***********************************************************************
TXFREE   DC    X'001C'              /* FREE=CLOSE KEY = '001C'       */
         DC    X'0000'              /* NUMBER OF FIELDS = 0          */
         SPACE 3                    /*                               */
***********************************************************************
*        FCB TEXT BLOCK                                              *
***********************************************************************
TXFCB    DC    X'0025'              /* FCB  TEXT KEY = '0025'        */
         DC    X'0001'              /* NUMBER OF FIELDS = 1          */
         DC    X'0004'              /* LENGTH OF PARM                */
FCB      DC    C'****'              /* FCB NAME                      */
         EJECT                      /*                               */
**********************************************************************
*        MESSAGES TO THE PROGRAMMER AND LOG.                         *
**********************************************************************
         CNOP  0,8                  /* ALIGN TO DOUBLEWORD           */
ALOCOK   WTO   'COBALLOC-SYSOUT DYNAMIC ALLOCATION IS SUCCESSFUL     ',X
               ROUTCDE=11,DESC=10,MF=L
ALOCNO   WTO   'COBALLOC-SYSOUT DYNAMIC ALLOCATION IS UNSUCCESSFUL *** X
               ERROR **',                                              X
               ROUTCDE=11,DESC=10,MF=L
UNALOK   WTO   'CBLUNALC-SYSOUT DYNAMIC DE-ALLOCATION SUCCESSFUL     ',X
               ROUTCDE=11,DESC=10,MF=L
UNALNO   WTO   'CBLUNALC-SYSOUT DYNAMIC DE-ALLOCATION UNSUCCESSFUL *** X
               ERROR **',                                              X
               ROUTCDE=11,DESC=10,MF=L
         EJECT                      /*                               */
         CNOP  0,8                  /* ALIGN TO DOUBLEWORD           */
ALLOCMSG WTO   '-------------------------------------------------------X
               ---------------------------------------------',         X
               ROUTCDE=11,DESC=10,MF=L
AMSGEND  EQU   *                    /*                               */
* THIS AREA OVERLAYS THE MSG TEXT AREA OF THE PRECEEDING WTO         */
         ORG   ALLOCMSG+4           /*                               */
AMSG     DS    0CL100               /*                               */
         DC    C'COBALLOC-'         /*                               */
         DC    C'DD='               /*                               */
AMSGDDNM DC    C'        '          /*                               */
         DC    C',CLASS='           /*                               */
AMSGCLAS DC    C' '                 /*                               */
         DC    C',COPY='            /*                               */
AMSGCOPY DC    C'   '               /*                               */
         DC    C',DEST='            /*                               */
AMSGDEST DC    C'     '             /*                               */
         DC    C',FREE='            /*                               */
AMSGFREE DC    C' '                 /*                               */
         DC    C',FORM='            /*                               */
AMSGFORM DC    C'    '              /*                               */
         DC    C',FCB='             /*                               */
AMSGFCB  DC    C'    '              /*                               */
         DC    C',RET='             /*                               */
AMSGRET  DC    C'  '                /*                               */
         DC    C',ERR='             /*                               */
AMSGERR  DC    C'    '              /*                               */
         DC    C',INFO='            /*                               */
AMSGINFO DC    C'    '              /*                               */
         ORG   AMSGEND              /* ORG BACK TO END OF LAST WTO   */
         EJECT                      /*                               */
         CNOP  0,8                  /* ALIGN TO DOUBLEWORD           */
UNALLMSG WTO   '-------------------------------------------------------X
               ---------------------------------------------',         X
               ROUTCDE=11,DESC=10,MF=L
UMSGEND  EQU   *                    /*                               */
* THIS AREA OVERLAYS THE MSG TEXT AREA OF THE PRECEEDING WTO         */
         ORG   UNALLMSG+4           /*                               */
UMSG     DS    0CL100               /*                               */
         DC    C'CBLUNALC-'         /*                               */
         DC    C'DD='               /*                               */
UMSGDDNM DC    C'        '          /*                               */
         DC    C',RET='             /*                               */
UMSGRET  DC    C'  '                /*                               */
         DC    C',ERR='             /*                               */
UMSGERR  DC    C'    '              /*                               */
         DC    C',INFO='            /*                               */
UMSGINFO DC    C'    '              /*                               */
         DC    54C' '               /*                               */
         ORG   UMSGEND              /* ORG BACK TO END OF LAST WTO   */
         LTORG
         IEFZB4D0
         IEFZB4D2
         END
