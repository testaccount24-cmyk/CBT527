//MSTITT   JOB   (0),'MATTHEW STITT',
//         CLASS=Q,
//         MSGCLASS=X,
//         MSGLEVEL=(1,1),
//         NOTIFY=MSTITT,
//         TIME=1440
//*                                                           /*JCTRL*/
//*
//*
//*
//*   ASSEMBLE SOURCE
//ASM     EXEC PGM=ASMA90,REGION=1024K,
//             PARM='OBJECT,NODECK,RENT'
//SYSLIB   DD  DSN=SYS1.MACLIB,
//             DISP=SHR
//         DD  DSN=SYS1.AMODGEN,
//             DISP=SHR
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(1700,(600,100))
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(1700,(600,100))
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(1700,(600,100))
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DUMMY,SYSOUT=B
//SYSLIN   DD  DSN=&&OBJSET,
//             DISP=(NEW,PASS),
//             UNIT=SYSALLDA,SPACE=(80,(200,50))
//SYSIN DD *
ANFUXEDA TITLE 'Ending Data Set Exit'
****** START OF SPECIFICATIONS ****************************************
*                                                                     *
* MODULE NAME = ANFUXEDA                                              *
*                                                                     *
* DESCRIPTIVE NAME = Ending Data Set exit for putting out sep page    *
*                                                                     *
* COPYRIGHT= 5695040 (c) COPYRIGHT IBM CORPORATION 1996               *
*                                                                     *
* STATUS = VERSION 1, RELEASE 1, LEVEL 0                              *
*                                                                     *
* FUNCTION =                                                          *
*        produce a separator page                                     *
*                                                                     *
* NOTES = none                                                        *
* DEPENDENCIES = none                                                 *
*                                                                     *
* MODULE TYPE = PROCEDURE                                             *
*    PROCESSOR = Assembler                                            *
*    ATTRIBUTES =                                                     *
*         REENTRANT                                                   *
*         AMODE(31)                                                   *
*         RMODE(ANY)                                                  *
*                                                                     *
* PATCH LABEL = none                                                  *
*                                                                     *
* ENTRY POINT =                                                       *
*         ANFUXEDA                                                    *
*                                                                     *
*    LINKAGE =                                                        *
*           LOAD ANFUXEDA                                             *
*           CALL ANFUXEDA(addr(ANFUEXTP))                             *
*           calling module passes address of Common Parameter         *
*           area.                                                     *
*                                                                     *
* CHANGE ACTIVITY =                                                   *
* 96/10/16 XXX Initial Version                                 @23418N*
*                                                                     *
***** END OF SPECIFICATIONS *******************************************
*
ANFUXEDA CSECT ,                   Establish the csect
ANFUXEDA AMODE ANY                 It addresses all storage
ANFUXEDA RMODE ANY                 It can reside anywhere
         USING ANFUXEDA,R15        Establish temporary addressability  X
                                   to module
         B     BDSINIT             Branch around copyright information
ANFUXEDA MODID BR=NO                       EYECATCHER INFO
         DC    C'LICENSED MATERIALS-PROPERTY OF IBM  '
         DC    C'THIS MODULE IS "RESTRICTED MATERIALS OF IBM"  '
         DC    C'5695-040 (c) COPYRIGHT IBM CORP. 1996  '
         DC    C'SEE COPYRIGHT INSTRUCTIONS  '
         EJECT ,
*---------------------------------------------------------------------*
*   ANFUXEDA Module entry point                                       *
*---------------------------------------------------------------------*
*
BDSINIT  DS    0H
         STM   R14,R12,12(R13)     Save callers registers
         LR    R12,R15             Move base register to R12
         DROP  R15                 Done with this register
         USING ANFUXEDA,R12        R12 is base reg for program code
         L     R4,0(R1)            Get address of parm area
         USING ANFUEXTP,R4         R4 is base for parm area
         ST    R13,XTPSAVE+4       chain save areas
         LA    R15,XTPSAVE         get my save area
         ST    R15,8(R13)          point callers save area to it
         LR    R13,R15             point R13 to my save area
         L     R6,XTPJSPAP         Get address of parm area
         USING IAZJSPA,R6          R6 is base for jspa area
         L     R7,XTPSWBTP         Get address of parm area
         L     R8,XTPSWBTL         Get length of parm area
         BCTR  R8,R0               Subtract 1 from length
         AR    R8,R7               R8 is endpoint of parm area
*---------------------------------------------------------------------*
*        Get storage for work area                                    *
*---------------------------------------------------------------------*
*
         SLR   R2,R2               get a zero
         L     R9,XTPWORK1         get working storage addr
         USING BDSSTG,R9
         CR    R9,R2               has work area been gotten?
         BNE   BDSDOIT             yes, skip this
         LA    R2,BDSSTGL          Get length of DSECT
         GETMAIN RU,LV=(2),LOC=ANY Get program storage area
         LR    R9,R1
         ST    R4,BDSWORKB         put addr of parm
         MVC   WRKJTBL,PYEARTAB    FOR POSSIBLE UPDATE
         ST    R9,XTPWORK1         save working storage addr
*
***********************************************************************
*        Actual work - call to get block characters                   *
***********************************************************************
BDSDOIT  DS    0H
         MVI   XTPBOUTP,C' '       begin blank line
         MVC   XTPBOUTP+1(L'XTPBOUTP-1),XTPBOUTP  blank the line
         TM    XTPDSFLG,XTPDSEJB   last data set in job?
         BNO   BDSTRT              No, initialize status flags
         TM    XTPRCFLG,XTPRDFST   first call for data set?
         BNO   BDSREST             no, don't do init stuff
BDSTRT   DS    0H
***********************************************************************
*        Actual work - initialize status flags                        *
***********************************************************************
         TM    XTPRCFLG,XTPRDFST   first call for data set?
         BNO   BDSREST             no, don't do init stuff
         MVI   XTPRCFLG,0          zero flags
         MVI   BDSWORKD,0          clear status flags
         MVC   BDSWORKD+1(15),BDSWORKD  clear the status flags
         TM    XTPDSFLG,XTPDSEJB   last data set in job?
         BO    BDSREST             yes, produce header
         OI    XTPRCFLG,XTPRLAST   don't call again
         B     DOLINE
BDSREST  DS    0H
         OI    XTPRCFLG,XTPRCCC    assume it has carriage control
         CLI   BDSWORKD+1,0        done with last line of text?
         BNE   DOJOBID1            yes, do last line for page break
GOTANID  DS    0H
         MVC   XTPBSTRG,JSPAJBNM   copy job name for conversion
         MVI   XTPBIFLG,X'00'      default formatting stuff
SETFLAGS DS    0H
*        OI    XTPBIFLG,XTPBPRFM   Narrow letters
*        OI    XTPBIFLG,XTPBLJST   on left margin
BDSREST1 DS    0H
         CLI   BDSWORKD,0          done with last line of text?
         BNE   DOLAST              yes, do last line for page break
         ST    R4,BDSWORKB         put addr of parm
         LA    R1,BDSWORKB
         L     R15,=V(ANFUBLK)     get address of block builder
         BALR  R14,R15
         CLI   BDSWORKD+2,0        done with last line of text?
         BNE   BDSREST2            yes, do last line for page break
         MVI   XTPBOUTP,X'F1'      put in page eject CC
         MVI   BDSWORKD+2,1        page eject only once
BDSREST2 DS    0H
         TM    XTPBOFLG,XTPBLAST   last one?
         BNO   NOTLAST             no, keep going
         MVI   BDSWORKD,1          saw last record, prepare to leave
NOTLAST  DS    0H
         SLR   R5,R5               get a zero
         IC    R5,XTPBLENG         get record length
         ST    R5,XTPERLEN         set length to print
         B     DOLINE
DOLAST   DS    0H
         CLI   BDSWORKD+3,2        done with last line of text?
         BH    DOJOBID             yes, do last line for page break
         CLI   BDSWORKD+1,1        done with last line of text?
         BH    DOBOX               yes, do the box
         MVC   XTPBOUTP(2),=C' '   put in blank line CC
         LA    R5,1                get length of record
         ST    R5,XTPERLEN         set length to print
         SR    R5,R5               zero the register
         LH    R5,BDSWORKD+2       put the counter in the register
         LA    R5,1(0,R5)          add 1 to it
         STH   R5,BDSWORKD+2       put it back to the counter
         B     DOLINE
DOJOBID  DS    0H
         CLI   BDSWORKD+1,0        done with last line of text?
         BH    DOBOX               yes, end of block letters
         MVI   BDSWORKD,0          not done yet
         MVI   BDSWORKD+3,0        not done yet
         MVI   BDSWORKD+1,1        don't do this again
         MVI   XTPBIFLG,X'00'      default formatting stuff
         OI    XTPBIFLG,XTPBFRST   first time for block letters
DOJOBID1 DS    0H
         MVC   XTPBSTRG,JSPAJBID   copy job id for conversion
         MVI   XTPBOFLG,X'00'      clear done flag
         B     SETFLAGS            generate block letters
DOBOX    DS    0H
         MVI   XTPBOUTP,C' '       begin blank line
         MVC   XTPBOUTP+1(L'XTPBOUTP-1),XTPBOUTP  blank the line
         MVI   XTPBOUTP+30,C'*'    begin asterisk
         MVI   XTPBOUTP+109,C'*'   ending asterisk
         LA    R5,110              get length of record
         ST    R5,XTPERLEN         set length to print
         SR    R5,R5               zero the register
         LH    R5,BDSWORKD+6       put the counter in the register
         LA    R5,1(0,R5)          add 1 to it
         STH   R5,BDSWORKD+6       put it back to the counter
         SR    R3,R3
         ICM   R3,1,BDSWORKD+7
         SLL   R3,2
         LA    R5,XTPBOUTP         get record address
         B     BTABLE(R3)
BTABLE   DS    F
         B     DOBOX1
         B     DOBOX2
         B     DOLINE
         B     DOBOX4
         B     DOBOX5
         B     DOBOX6
         B     DOBOX7
         B     DOBOX8
         B     DOBOX9
         B     DOLINE
         B     DOBOX11
         B     DOBOX12
         B     DOBOX13
         B     DOBOX14
         B     DOBOX15
         B     DOBOX16
         B     DOLINE
         B     DOBOX18
         B     DOBOX19
         B     DOBOX20
         B     DOBOX21
         B     DOBOX22
         B     DOBOX23
         B     DOBOX24
         B     DOBOX25
         B     DOBOX1
         B     DOEND
DOBOX1   DS    0H
         LA    R3,8                setup loop register
         LA    R5,30(0,R5)         beginning offset into print line
BOX1LP   DS    0H
         MVC   0(10,R5),=C'***END****'
         LA    R5,10(0,R5)         increment offset
         BCT   R3,BOX1LP           circle around
         B     DOLINE
DOBOX2   DS    0H
         MVC   XTPBOUTP+32(L'PHEAD),PHEAD  constant to print
         B     DOLINE
DOBOX4   DS    0H
         MVC   XTPBOUTP+32(L'PJOBID),PJOBID  constant to print
         MVC   XTPBOUTP+47(L'JSPAJBID),JSPAJBID job id
         B     DOLINE
DOBOX5   DS    0H
         MVC   XTPBOUTP+32(L'PJOBNM),PJOBNM  constant to print
         MVC   XTPBOUTP+47(L'JSPAJBNM),JSPAJBNM job name
         B     DOLINE
DOBOX6   DS    0H
         MVC   XTPBOUTP+32(L'PUSERID),PUSERID constant to print
         MVC   XTPBOUTP+47(L'XTPUSRID),XTPUSRID user id
         B     DOLINE
DOBOX7   DS    0H
         MVC   XTPBOUTP+32(L'PSYSOUTC),PSYSOUTC constant to print
         MVC   XTPBOUTP+47(L'JSPJSOCL),JSPJSOCL sysout class
         LA    R10,DOCLASS
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX8   DS    0H
         MVC   XTPBOUTP+32(L'POUTGRP),POUTGRP constant to print
         MVC   XTPBOUTP+47(L'JSPJGRPN),JSPJGRPN output group name
         MVI   XTPBOUTP+55,C'.'    separator
         SR    R10,R10
         LH    R10,JSPJGRP1
         CVD   R10,BDSWORKH
         MVC   XTPBOUTP+56(5),POGMASK
         ED    XTPBOUTP+56(5),BDSWORKH+4
         MVI   XTPBOUTP+62,C'.'    separator
         SR    R10,R10
         LH    R10,JSPJGRP2
         CVD   R10,BDSWORKH
         MVC   XTPBOUTP+63(5),POGMASK
         ED    XTPBOUTP+63(5),BDSWORKH+4
         B     DOLINE
DOBOX9   DS    0H
         MVC   XTPBOUTP+32(L'PTITLE),PTITLE  constant to print
         LA    R10,DOTITLE
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX11  DS    0H
         MVC   XTPBOUTP+32(L'PPRTTM),PPRTTM  constant to print
***********************************************************************
*                                                                     *
*        Obtain time and date (year 2000 ready)                       *
*        Routine called if BDSWORKD=7                                 *
*                                                                     *
***********************************************************************
*
         XC    WRKY2000(16),WRKY2000   Clear
         TIME  DEC,WRKY2000,LINKAGE=SYSTEM,MF=(E,TIME1)
         L     R0,WRKY2000+8           Point to date 0YYYYDDD
         SLL   R0,4                    R0=YYYYDDD0
         SLR   R1,R1                   R1=00000000
         IC    R1,=X'0F'               R1=0000000F
         OR    R0,R1                   R0=YYYYDDDF
         ST    R0,WRKDATE              Save date packed decimal
         L     R0,WRKY2000             Point to time HHMMSSTT
*
***********************************************************************
*                                                                     *
*        Adjust time for am/pm                                        *
*                                                                     *
***********************************************************************
*
         LA    R2,WRKTIME              Get address of work area
         MVC   WRKAMPM(2),AM           Set AM/PM to AM
         CL    R0,=X'12000000'         Test for zero hours
         BL    PMORNING                Branch if AM
         MVI   WRKAMPM,C'P'            Change from AM to PM
         SL    R0,=X'12000000'         Subtract twelve hours
PMORNING ST    R0,0(,R2)               Store adjusted time
         CLI   0(R2),X'00'             Test for zero hours
         BNE   PADJERR                 Br if not to test adj err
         MVI   0(R2),X'12'             Convert zero to twelve
PADJERR  TM    0(R2),X'08'             Test for adjustment errors
         BZ    PEDTIME                 Branch if no error
         NI    0(R2),X'09'             Correct for binary substr. err
PEDTIME  DS    0H
*
***********************************************************************
*                                                                     *
*        Unpack hours minutes seconds                                 *
*                                                                     *
***********************************************************************
*
         MVI   WRKTH,X'0C'             Reset low order 2 bytes
*                                      with sign for packed decimal
         UNPK  WRKUTIME(7),WRKTIME(4)  Unpack time INTO PROPER FIELD
         CLI   WRKHR,X'F0'             If hour has leading zero
         BNE   PTIME
         MVC   WRKHR(1),BLANK          Change zero to blank
PTIME    DS    0H
***********************************************************************
*                                                                     *
*        Obtain month, day and year                                   *
*                                                                     *
***********************************************************************
*
         MVC   WRKWORK+4(4),WRKDATE    Obtain date from saved area
         TM    WRKWORK+5,X'01'          test
         BO    NOLEAPYR                  for
         TM    WRKWORK+5,X'12'            leap
         BM    NOLEAPYR                    year
         MVI   WRKJTBL+4,29            Adjust feb for leap year
NOLEAPYR MVC   WRKYY(4),=X'20202020'   Place pattern for edit
         ED    WRKYY(4),WRKWORK+4      Edit the year
         MVC   WRKWORK(6),ZEROES       Reset all but julian date
         SLR   R0,R0                   Clear for ic
         CVB   1,WRKWORK               Convert to binary day
         LA    2,WRKJTBL-4             Address od date conversion
*                                       table
SEARCH   SLR   R1,R0                     convert
         LA    R2,4(,R2)                  julian day
         IC    R0,0(,R2)                   to
         CLR   R0,R1                        standard day
         BL    SEARCH
         CVD   1,WRKWORK               Convert to decimal day
         UNPK  WRKDD(2),WRKWORK+6(2)   Unpack the day
         OI    WRKDD+1,X'F0'           Insure sign nibble
         MVC   WRKMMM(3),1(R2)         Set ebcidic alpha month
         MVC   XTPBOUTP+47(L'WRKHR),WRKHR print hour
         MVI   XTPBOUTP+49,C':'        time separator
         MVC   XTPBOUTP+50(L'WRKMIN),WRKMIN print minute
         MVI   XTPBOUTP+52,C':'        time separator
         MVC   XTPBOUTP+53(L'WRKSEC),WRKSEC print second
         MVC   XTPBOUTP+56(L'WRKAMPM),WRKAMPM print am or pm
         B     DOLINE
DOBOX12  DS    0H
         MVC   XTPBOUTP+32(L'PPRTDT),PPRTDT  constant to print
         MVC   XTPBOUTP+47(2),WRKDD
         MVC   XTPBOUTP+50(3),WRKMMM
         MVC   XTPBOUTP+54(4),WRKYY
         B     DOLINE
DOBOX13  DS    0H
         MVC   XTPBOUTP+32(L'PPRTR),PPRTR  constant to print
         MVC   XTPBOUTP+47(L'JSPADEVN),JSPADEVN  constant to print
         B     DOLINE
DOBOX14  DS    0H
         MVC   XTPBOUTP+32(L'PSYSID),PSYSID  constant to print
         L     R10,JSPAJMR
         USING JMR,R10
         MVC   XTPBOUTP+47(L'JMRCPUID),JMRCPUID  constant to print
         DROP  R10
         B     DOLINE
DOBOX15  DS    0H
         MVC   XTPBOUTP+32(L'PPDEF),PPDEF constant to print
         LA    R10,DOPAGEDE
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX16  DS    0H
         MVC   XTPBOUTP+32(L'PFDEF),PFDEF  constant to print
         LA    R10,DOFORMD
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX18  DS    0H
         MVC   XTPBOUTP+32(L'PDEST),PDEST constant to print
         MVC   XTPBOUTP+47(L'XTPDEST),XTPDEST sysout destination
         B     DOLINE
DOBOX19  DS    0H
         MVC   XTPBOUTP+32(L'PNAME),PNAME constant to print
         LA    R10,DONAME
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX20  DS    0H
         MVC   XTPBOUTP+32(L'PROOM),PROOM constant to print
         MVC   XTPBOUTP+47(L'JSPJRMNO),JSPJRMNO sysout room
         LA    R10,DOROOM
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX21  DS    0H
         MVC   XTPBOUTP+32(L'PBLDG),PBLDG  constant to print
         LA    R10,DOBUILD
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX22  DS    0H
         MVC   XTPBOUTP+32(L'PDEPT),PDEPT  constant to print
         LA    R10,DODEPT
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX23  DS    0H
         MVC   XTPBOUTP+32(L'PADDRS),PADDRS  constant to print
         LA    R10,DOADDRES
         STH   R10,BDSWORKD+4(2)
         B     SWBSCAN
DOBOX24  DS    0H
*        LA    R10,DOADDRES
*        STH   R10,BDSWORKD+4(2)
*        B     SWBSCAN
         B     DOLINE
DOBOX25  DS    0H
*        LA    R10,DOADDRES
*        STH   R10,BDSWORKD+4(2)
*        B     SWBSCAN
         B     DOLINE
DOBOX26  DS    0H
*        LA    R10,DOADDRES
*        STH   R10,BDSWORKD+4(2)
*        B     SWBSCAN
         B     DOLINE
DOEND    DS    0H
         MVC   XTPBOUTP(2),=C'1'   put in page eject CC
         LA    R5,1                get length of record
         ST    R5,XTPERLEN         set length to print
         OI    XTPRCFLG,XTPRLAST   don't call again
         LA    R2,BDSSTGL          Get length of DSECT
         FREEMAIN RU,LV=(2),A=(R9) FREE PROGRAM STORAGE AREA
         SLR   R2,R2               get a zero
         ST    R2,XTPWORK1         no working storage addr
DOLINE   DS    0H
         LA    R5,XTPBOUTP         get record address
         ST    R5,XTPERPTR         put it in XTP area
         OI    XTPRCFLG,XTPRCTRN   translate it to ASCII
         OI    XTPRCFLG,XTPRCEXT   print the record
*
*---------------------------------------------------------------------*
*        Return to caller                                             *
*---------------------------------------------------------------------*
GETOUT   DS    0H
         L     R13,XTPSAVE+4      Get address of caller's save area
         LM    R14,R12,12(R13)    Restore caller's registers
         BR    R14                Return to MVS
*
*---------------------------------------------------------------------*
*        Scan SWBTU data area                                         *
*---------------------------------------------------------------------*
SWBSCAN  DS    0H
         USING SJPRFX,R7           R7 is base for swbtu area
         MVC   BDSWORKH+7(1),SJPRPLEN
         LR    R11,R7
         LH    R10,BDSWORKH+6
         AR    R11,R10             Skip around swbtu prefix area
         USING DOCNUNIT,R11        R11 is base for data descriptor area
DOSWBL1  DS    0H
         MVC   BDSWORKH(2),DOCNTLTH get length of field
         LH    R10,BDSWORKH         get length of field
         CLC   DOCNTKEY,BDSWORKD+4 this the field looking for?
         BE    FNDSWB              yes, move it to output
         AR    R11,R10             skip field
         LA    R11,6(0,R11)        skip field headers
         CR    R11,R8              at the end?
         BL    DOSWBL1
         B     OUTSWB              end of SWBTU
FNDSWB   DS    0H
         LA    R11,6(0,R11)        skip field headers
         LA    R5,XTPBOUTP         get record address
         LA    R5,47(0,R5)         go to beginning of print
DOSWBL2  DS    0H
         MVC   0(1,R5),0(R11)
         LA    R5,1(0,R5)
         LA    R11,1(0,R11)
         BCT   R10,DOSWBL2
OUTSWB   DS    0H
         B     DOLINE
*
*---------------------------------------------------------------------*
*        Constants and Literals                                       *
*---------------------------------------------------------------------*
         DS    0H
SETUPSTR DS 0C
*
         DC X'27'                 escape
         DC X'50'                 ampersand
         DC C'l1S'                duplex   0=simplex 1=duplex 2=tumble
*
         DC X'27'                 escape
         DC C'(8U'                code page roman-8
*
         DC X'27'                 escape
         DC C'(s1p8v0s0b4101T'    change font to CG Times
*
SETUPLEN EQU  *-SETUPSTR
SETUPLND DS 0C
*
         DC X'27'                 escape
         DC X'50'                 ampersand
         DC C'l1O'                landscape format
*
         DC X'27'                 escape
         DC X'50'                 ampersand
         DC C'l8D'                8 lines per inch
*
         DC X'27'                 escape
         DC C'(10U'               IBM layout default symbol set
*
         DC X'27'                 escape
         DC C'(s0p16.67h8.5v0s0b0T' change font to line printer
*
SETUPLNG EQU  *-SETUPLND
PHEAD    DC   C'IP PRINTWAY V1R1  STC: PRINTWAY'
PJOBID   DC   C'JOBID:'
PJOBNM   DC   C'JOB NAME:'
PUSERID  DC   C'USERID:'
PSYSOUTC DC   C'SYSOUT CLASS:'
POUTGRP  DC   C'OUTPUT GROUP:'
PTITLE   DC   C'TITLE:'      '
PDEST    DC   C'DESTINATION:'
PNAME    DC   C'NAME:'
PROOM    DC   C'ROOM:'
PBLDG    DC   C'BUILDING:'
PDEPT    DC   C'DEPARTMENT:'
PADDRS   DC   C'ADDRESS:'
PPRTTM   DC   C'PRINT TIME:'
PPRTDT   DC   C'PRINT DATE:'
PPRTR    DC   C'PRINTER NAME:'
PSYSID   DC   C'SYSTEM NAME:'
PPDEF    DC   C'PAGEDEF:'
PFDEF    DC   C'FORMDEF:'
AM       DC   C'AM'
BLANK    DC   C' '
ZEROES   DC   X'000000000000'
POGMASK  DC    X'2120202020'                MASK
PYEARTAB DC    AL1(31),C'JAN',AL1(28),C'FEB'  JULIAN
         DC    AL1(31),C'MAR',AL1(30),C'APR'   TO DAY
         DC    AL1(31),C'MAY',AL1(30),C'JUN'    AND
         DC    AL1(31),C'JUL',AL1(31),C'AUG'     MONTH
         DC    AL1(30),C'SEP',AL1(31),C'OCT'      CONVERSION
         DC    AL1(30),C'NOV',AL1(255),C'DEC'      TABLE
         LTORG
*---------------------------------------------------------------------*
*        Work area                                                    *
*---------------------------------------------------------------------*
BDSSTG   DSECT
BDSWORKB DS    CL256              area for output record
         DS    0H
BDSWORKD DS    8BL1
BDSWORKH DS    8BL1
WRKWORK  DS    CL8                     Work area for conversion
WRKY2000 DS    CL16                    Time SVC work area
WRKDATE  DS    CL4                     Current date - packed
WRKTIME  DS    CL4                     Current time - packed
         ORG   WRKTIME
         DS    CL3                     Hours minutes seconds
WRKTH    DS    CL1                     Tenths and hundredths
WRKUDATE DS    CL8                     Current date - unpacked
         ORG   WRKUDATE
WRKMMM   DS    CL3                     Month
WRKDD    DS    CL2                     Day
WRKYY    DS    CL4                     Year
         DS    CL1                     Reserved
WRKAMPM  DS    CL2                     Current AM/PM
WRKUTIME DS    CL7                     Current time - unpacked
         ORG   WRKUTIME
WRKHR    DS    CL2                     Hour
WRKMIN   DS    CL2                     Minute
WRKSEC   DS    CL2                     Second
         DS    CL1                     Sign byte
WRKJTBL  DS    CL48                    Julian conversion table
TIME1    TIME  LINKAGE=SYSTEM,MF=L     Year 2000 ready
         DS    10F                     Alignment
DBLWRK   DS    D
*
BDSSTGL  EQU   *-BDSSTG          Length of program storage
         ANFUEXTP LIST=YES
         IAZJSPA LIST=YES
         IEFSJPFX DSECT=YES
         IEFDOTUM
         IEFDOKEY
*        IEFJESCT
         IEFJMR
*        IEFSJTRC
*        IEFSJTRP DSECT=NO
*---------------------------------------------------------------------*
*        End of Program Storage                                       *
*---------------------------------------------------------------------*
*
R0       EQU   0                   Register
R1       EQU   1                     equates
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   ,                   End of ANFUXED2 module
//*   LINK-EDIT OBJECT TO LINKLIB
//LINK     EXEC PGM=IEWL,
//  PARM='MAP,LIST,XREF,AC=0,RENT,AMODE=31,RMODE=ANY',
//        REGION=512K
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(4,1))
//SYSPRINT DD  SYSOUT=*
//SYSLMOD  DD  DSN=HHSYS.PROD.LINKLIB,DISP=SHR
//SANFSAMP DD  DSN=SYS1.SAMPLIB,DISP=SHR
//SYSMOD   DD  DSN=&&OBJSET,
//             DISP=(OLD,DELETE)
//SYSLIN   DD  *
 INCLUDE SYSMOD
 INCLUDE SANFSAMP(ANFUBLK)
 INCLUDE SANFSAMP(ANFUBTBL)
 ENTRY ANFUXEDA
 NAME ANFUXEDA(R)
//*
