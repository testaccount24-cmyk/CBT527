         MACRO
         PROLOG
***********************************************************************
**                                                                   **
**                                                                   **
**              DIRECT ACCESS DEVICE SPACE MANAGER                   **
**                                                                   **
**       IS A MANAGEMENT-ORIENTED REPORTING TOOL TO AID IN           **
**       MONITORING AND CONTROLLING SPACE UTILIZATION                **
**       CURRENTLY PRODUCES THE FOLLOWING REPORTS-                   **
**                                                                   **
**       1.  VOLUME SUMMARY                                          **
**       2.  SUBSYSTEM SUMMARY                                       **
**       3.  DATASET SUMMARY                                         **
**                                                                   **
**       THESE REPORTS ARE GENERATED ON A SYSTEM-WIDE BASIS          **
**       FOR ALL VOLUMES ONLINE AND READY AT PROGRAM RUN-TIME.       **
**                                                                   **
**       EXAMPLE JCL FOLLOWS:                                        **
**                                                                   **
**       //JOBNAME  JOB  (ACCOUNT),PGMRNAME,                         **
**       //         CLASS=A,MSGCLASS=A,NOTIFY=TS001                  **
**       //DADSM    EXEC PGM=DADSM                                   **
**       //SYSPRINT DD   SYSOUT=*                                    **
**       //MCDS     DD   SYS2.HSM.MCDS         (IF HSM IS INSTALLED) **
**       //ANYNAME  DD   UNIT=DASD,VOL=SER=ANY,DISP=SHR (OPTIONAL)   **
**                                                                   **
**       THIS ROUTINE HAS TWO MODES OF OPERATION:                    **
**        1 - TOTAL SYSTEM REQUEST                                   **
**            THIS MODE (THE DEFAULT) WILL CAUSE 'ALL' VOLUMES THAT  **
**            ARE ONLINE AND READY TO BE INCLUDED IN THE EXECUTION.  **
**        2 - SPECIFIC VOLUME REQUEST                                **
**            THIS MODE CAUSES SPECIFIED VOLUMES TO BE THE TARGET    **
**            OF THE EXECUTION (E.G. LIMITED TO CERTAIN VOLUMES).    **
**                                                                   **
**       FOR MODE-1 ABOVE (TOTAL SYSTEM), EACH VOLUME FOUND ONLINE   **
**       AND READY WILL BE DYNAMICALLY ALLOCATED AND WILL EXCLUDE    **
**       ALL MSS VOLUMES (DEFAULT).                                  **
**       IF ALL ONLINE MSS VOLUMES ARE TO BE PROCESSED AS WELL,      **
**       PROVIDE A PARM AS FOLLOWS:  PARM=MSS                        **
**                                                                   **
**       FOR MODE-2 ABOVE (SPECIFIC REQUEST), THE VOLUMES REFLECTED  **
**       BY USER DEFINDED DATA DEFINITION STATEMENTS WILL BE USED    **
**       AS INPUT TO THIS ROUTINE.  FOR NON-MVS SYSTEMS, THIS IS     **
**       THE ONLY VALID OPTION (DYNAMIC ALLOCATION REQ'D).           **
**                                                                   **
**       ANY VOLUME WHOSE SERIAL BEGINS WITH 'VM' IS ASSUMED TO BE   **
**       A VM/370 VOLUME AN IS BYPASSED BY THIS ROUTINE.  THIS IS    **
**       BECAUSE VM/370 VTOCS ARE NON-STANDARD AND CAUSE EXTENT      **
**       VIOLATION ERRORS TO BE REFLECTED BY IOS.                    **
**                                                                   **
**       NOTE THAT 'SYS1.AMODGEN' IS REQUIRED FOR ASSEMBLY.          **
**                                                                   **
**       THIS ROUTINE ORIGINALLY CAME FROM TRAILER-TRAIN COMPANY     **
**       OF CHICAGO AND WAS MODIFIED AND INSTALLED AT BUCYRUS-ERIE   **
**       BY LARRY SIMPSON (4-26-77).                                 **
**                                                                   **
**       THIS ROUTINE WAS MODIFIED FOR 31 BIT ADDRESSNG AND USAGE    **
**       OF THE UCBSCAN MACRO BY MATTHEW STITT (06-15-97)            **
**                                                                   **
***********************************************************************
         MEND
         MACRO
&LBL     BEGIN
&LBL     CSECT
         USING *,R15
         B     &LBL+72
         ORG   &LBL+72
         STM   R14,R12,12(R13)
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         DROP  R15
         USING &LBL,R13
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RLNK     EQU   10
RLNK2    EQU   2
         MEND
         MACRO
&LBL     SORT  &START=,&END=,&ENTRYL=,&KEYLEN=,&KEYOFF=,&MODE=
         TITLE 'DADSM-    DASD RESOURCE MANAGER'
         LCLC  &OP1,&OP2,&OP3,&OP4
         LCLC  &OPC,&OPD
         LCLC  &M
&OP1     SETC  '0(&KEYLEN,R9)'
&OP2     SETC  '&ENTRYL'.'(R9)'
&OP3     SETC  '&ENTRYL'.'(&ENTRYL,R9)'
&OP4     SETC  '0(&ENTRYL,R9)'
&OPC     SETC  '&KEYOFF'.'(&KEYLEN,R9)'
&OPD     SETC  '&KEYOFF'.'+'.'&ENTRYL'.'(R9)'
&M       SETC  'NH'
         AIF   ('&MODE' EQ 'A').AN1
&M       SETC  'NL'
.AN1     ANOP
&LBL     NOP   0
S&SYSNDX EQU   *-1
         LA    R6,&ENTRYL         PU ENTRY LENGTH
         L     R7,&END            LOCATION OF TABLE END
         SR    R7,R6             BACK UP TO LAST ENTRY
         BCTR  R7,0               -1
A&SYSNDX L     R9,&START           TABLE START
         MVI   S&SYSNDX,0          SWITCH OFF
B&SYSNDX CLC   &OPC,&OPD           COMPARE SUCCEEDING ENTRIES
         B&M   C&SYSNDX            BRANCH MODE TO BXLE
         XC    &OP4,&OP2
         XC    &OP3,0(R9)
         XC    &OP4,&OP2
         OI    S&SYSNDX,X'FF'      SET SWAPPED SWITCH
C&SYSNDX BXLE  R9,R6,B&SYSNDX     SHUFFLE
         SR    R7,R6             SHUFFLE DOWN
         CLI   S&SYSNDX,X'FF'      TEST SWAPPED SWITCH
         BE    A&SYSNDX            DO IT AGIN
         MEND
         MACRO
&LBL     MVOUT &STR,&LN,&END,&MODE,&RTN
&LBL     L     R3,&STR
         LA    R4,&LN
         L     R5,&END
         SLR   R5,R4
         MVI   SW,&MODE
         BAS   RLNK,PRINTHDR
L&SYSNDX BAS   RLNK2,&RTN
         BXLE  R3,R4,L&SYSNDX
         MEND
         PRINT ON
DADSM    AMODE 31
DADSM    RMODE ANY
         PROLOG
DADSM    BEGIN                     SETUP
*AXVOLS  EQU   256                 MAXIMUM NUMBER OF VOLUME SERIALS
MAXVOLS  EQU   1024                MAXIMUM NUMBER OF VOLUME SERIALS
*AXINX   EQU   128                 MAXIMUM NUMBER OF DSN QUALIFIERS
*AXINX   EQU   256                 MAXIMUM NUMBER OF DSN QUALIFIERS
*AXINX   EQU   384                 MAXIMUM NUMBER OF DSN QUALIFIERS
MAXINX   EQU   512                 MAXIMUM NUMBER OF DSN QUALIFIERS
*AX#DSN  EQU   4096                MAXIMUM NUMBER OF DSNAMES IN TABLE
*AX#DSN  EQU   8192                MAXIMUM NUMBER OF DSNAMES IN TABLE
*AX#DSN  EQU   16384               MAXIMUM NUMBER OF DSNAMES IN TABLE
*AX#DSN  EQU   65536               MAXIMUM NUMBER OF DSNAMES IN TABLE
MAX#DSN  EQU   121072              MAXIMUM NUMBER OF DSNAMES IN TABLE
         LR    R12,R13             SET SECOND BASEREG
         LA    R12,4095(R12)
         LA    R12,1(R12)
         USING DADSM+4096,R12
         OI    DYNPARM,X'80'
         OI    DYNTUC1,X'80'
         L     R1,0(R1)            PARM POINTER
         LH    R2,0(R1)            PARM SIZE
         LTR   R2,R2               ANY PARM?
         BZ    NOPARM              NO, CONTINUE
         CH    R2,=H'3'            VALID?
         BNE   PARMERR             NO, ABEND
         OC    2(3,R1),=CL3' '     UPPER CASE
         CLC   2(3,R1),=C'MSS'     VALID?
         BNE   PARMERR             NO, ABEND
         OI    SW,MSS              SET OPTION
NOPARM   EQU   *
         MVI   HSMSW,C'Y'          INDICATE HSM PROCESSING
**       INITIALIZE WORKAREAS FOR VOLUME,INDEX,AND DATASET TABLES    **
         L     R2,VPARM
         STORAGE OBTAIN,LENGTH=(2),ADDR=VSTART,LOC=(ANY,ANY)
         L     R2,VSTART           PU START ADDRESS
         L     R3,VPARM            PU LENGTH
         AR    R3,R2               CALC END
         ST    R3,VEND             STORE IT
         ST    R2,VFREE            STORE FIRST SLOT
         L     R2,IPARM
         STORAGE OBTAIN,LENGTH=(2),ADDR=ISTART,LOC=(ANY,ANY)
         L     R2,ISTART           PU TABLE START
         L     R3,IPARM            PU TABLE  LENGTH
         AR    R3,R2               COMPUTE END
         ST    R3,IEND             STORE TABLE LIMIT
         ST    R2,IAVAIL           STORE FIRST SLOT
         L     R2,DPARM
         STORAGE OBTAIN,LENGTH=(2),ADDR=DSTART,LOC=(ANY,ANY)
         L     R2,DSTART           PU START
         L     R3,DPARM            PU LENGTH
         AR    R3,R2               CALC END
         ST    R3,DEND             STORE END
         ST    R2,DAVAIL           STORE FIRST SLOT
         OPEN  (MCDS,INPUT),MODE=31 OPEN MCDS FOR INPUT
         LTR   R15,R15             OPEN SUCCESSFUL?
         BZ    OPENOUT             YES, CONTINUE
         MVI   HSMSW,C'N'          INDICATE NO HSM PROCESSING
OPENOUT  EQU   *
         L     R2,PPARM
         STORAGE OBTAIN,LENGTH=(2),ADDR=PSTART,LOC=BELOW
         L     R11,PSTART
         USING IOASECT,R11
         MVC   SYSPRINT,SYSPR      COPY SYSPRINT DCB
         MVC   IEFRDER,IEFRD       COPY IEFRDER DCB
         MVC   OPENLST,OPENMOD     COPY MODEL OPEN MACRO
         MVC   CLOSLST,CLOSMOD     COPY MODEL CLOSE MACRO
         MVC   RDJFLST,RDJFMOD     COPY MODEL RDJFCB MACRO
         LA    R0,SECR0            GET ADDRESS OF CCW PARAMETER
         STCM  R0,B'0111',CCW1+1   STORE IT IN CCW
         LA    R0,SECR1            GET ADDRESS OF CCW PARAMETER
         STCM  R0,B'0111',CCW5+1   STORE IT IN CCW
         LA    R0,DSCB1            GET ADDRESS OF CCW DATA AREA
         STCM  R0,B'0111',CCW4+1   STORE IT IN CCW
         LA    R2,IOB1             GET ADDRESS OF IOBLOCK
         LA    R2,35(R2)           BUMP IT UP
         STCM  R2,B'0111',CCW2+1   STORE IT IN CCW
         LA    R2,CP1              GET ADDRESS OF CCW PARAMETER
         LA    R2,08(R2)           BUMP IT UP
         STCM  R2,B'0111',CCW3+1   STORE IT IN CCW
         MVC   CP1,CP1A            COPY MODEL CCW STRING
         LA    R0,EXIT1            GET ADDRESS OF EXIT LIST
         STCM  R0,B'0111',DCBEXLSA-IHADCB+IEFRDER   STORE IT IN DCB
         LA    R0,IOB1             GET ADDRESS OF IOBLOCK
         ST    R0,DCBIOBAD-IHADCB+IEFRDER   STORE IT IN DCB
         LA    R0,JFCB1            GET ADDRESS OF JFCB DATA AREA
         STCM  R0,B'0111',EXIT1A   STORE IT IN EXIT LIST
         MVI   EXIT1,X'87'         MAKE IT THE LAST ENTRY IN LIST
         LA    R0,SYSEX            GET ADDRESS OF EXIT LIST
         STCM  R0,B'0111',DCBEXLSA-IHADCB+SYSPRINT  STORE IT IN DCB
         MVI   SYSEX,X'85'         MAKE IT THE LAST ENTRY IN LIST
         LA    R0,SYSEXT           GET ADDRESS OF EXECUTABLE CODE
         STCM  R0,B'0111',SYSEXL   STORE IT IN EXIT LIST
         MVC   SYSEXT,SYSEXIT1     MOVE THE EXECUTABLE CODE
         LA    R0,SYSEXIT
         ST    R0,ADOPEN31
         OI    ADOPEN31,X'80'
OPENPRT  OPEN  (SYSPRINT),MF=(E,OPENLST),MODE=31
         LA    R4,SYSPRINT         PT MESSAGE DCB
         USING IHADCB,R4
         TM    DCBOFLGS,OPEN       CHECK COMPLETION
         DROP  R4
         BNO   SYSERR1             BRANCH ON FAILURE
         BAS   RLNK,PRINT          PRIME BUFFER
         SPACE
         EJECT
***********************************************************************
**                                                                   **
**       DETERMINE MODE OF OPERATION BY CHECKING TIOT FOR A NON-     **
**       SYSTEM DD ENTRY.  IF NONE IS FOUND, INDICATE MODE1 AND      **
**       PROCESS ALL ONLINE/READY DASD VOLUMES.                      **
**                                                                   **
**       FOR MODE-2 (SPECIFIC REQUEST), LOOP THROUGH THE TIOT AND    **
**       PROCESS ALL NON-RESERVED DDNAMES (IF DASD).                 **
**                                                                   **
***********************************************************************
         SPACE 2
         OI    SW,MODE1            INDICATE MODE-1 PROCESSING
         EXTRACT TIOTPOSN,'S',FIELDS=(TIOT)
         L     R15,TIOTPOSN
         LA    R15,24(R15)         FIRST TIOT DD ENTRY
         B     CHKTIOT             PROCESS FIRST ENTRY
NEXTTIOT L     R15,TIOTPOSN        GET TIOT POSITION
CHKTIOT  SR    R0,R0               CLEAR FOR IC
         SR    R1,R1               CLEAR FOR IC
         ST    R0,WORK3
         MVC   WORK3+3,0(R15)
         L     R0,WORK3
         CR    R0,R1
         BE    TIOTEND             NO SIZE, END OF TIOT
         AR    R15,R0              NEW ENTRY LOC
         ST    R15,TIOTPOSN        SAVE NEW TIOT LOCATION
         CLC   4(3,R15),=CL3'SYS'      SYSTEM ENTRY?
         BE    NEXTTIOT            YES, SKIP ENTRY
         CLC   4(8,R15),=CL8'STEPLIB ' SYSTEM ENTRY?
         BE    NEXTTIOT            YES, SKIP ENTRY
         CLC   4(8,R15),=CL8'PGM=*.DD' SYSTEM ENTRY?
         BE    NEXTTIOT            YES, SKIP ENTRY
         CLC   4(8,R15),=CL8'STEPCAT ' SYSTEM ENTRY?
         BE    NEXTTIOT            YES, SKIP ENTRY
         CLC   4(8,R15),=CL8'JOBCAT  ' SYSTEM ENTRY?
         BE    NEXTTIOT            YES, SKIP ENTRY
         CLC   4(8,R15),=CL8'MCDS    ' HSM ENTRY?
         BE    NEXTTIOT            YES, SKIP ENTRY
         MVC   IEFRDER+DCBDDNAM-IHADCB(8),4(R15) MODIFY DCB DDNAME
         RDJFCB IEFRDER,MF=(E,RDJFLST)  GET THE JFCB FOR THE FILE
         MVC   SAVOL1,JFCB1+118    SAVE THE VOLSER
         XC    WORKAREA,WORKAREA   INITIALIZE UCB WORK AREA
         UCBSCAN COPY,UCBAREA=UCBA,DYNAMIC=YES,WORKAREA=WORKAREA,      X
               RANGE=ALL,VOLSER=SAVOL1,DEVCLASS=DASD,RETCODE=WORK1,    X
               RSNCODE=WORK2
         CLI   WORK1+3,X'00'
         BNE   NEXTTIOT
         LA    R9,UCBA
         USING UCBOB,R9
         CLI   JFCB1+8,C'.'        COULD THIS BE A TEMPORARY NAME?
         BNE   NEXTTIOT            NO, MIGHT BE A CATALOG
         CLC   JFCB1(3),=CL3'SYS'  IS THIS A TEMPORARY FILE DSN?
         BE    NOCAT               YES, CANNOT BE A CATALOG
         B     NEXTTIOT            NO, MUST BE A CATALOG
NOCAT    DS    0H
*     A NON-SYSTEM DD ENTRY HAS BEEN FOUND, SET INDICATOR AND PROCESS
         OI    SW,MODE2            INDICATE MODE-2 PROCESSING
         B     PROCESS             PROCESS THIS DEVICE
TIOTEND  TM    SW,MODE2            END OF TIOT, MODE-2?
         BO    NEOJ                YES, PROVIDE REPORT
         XC    WORKAREA,WORKAREA   INITIALIZE UCB WORK AREA
***********************************************************************
**                                                                   **
**       FOR MODE-1 (ALL DASD DEVICES), LOOP THROUGH THE ALL UCB'S   **
**       VIA ISOVSUCB AND PROCESS EACH DEVICE FOUND READY AND ONLINE.**
**                                                                   **
***********************************************************************
NEXTUCB  DS    0H
         UCBSCAN COPY,UCBAREA=UCBA,WORKAREA=WORKAREA,DYNAMIC=YES,      X
               DEVCLASS=DASD,RANGE=ALL,RETCODE=WORK1,RSNCODE=WORK2
         CLI   WORK1+3,X'04'
         BE    NEOJ                NO, NORMAL END OF JOB
         BH    DYNWTO              UCBSCAN FAILURE
         LA    R9,UCBA             PU UCB ADDRESS
         TM    UCBSTAT,X'80'       ONLINE?
         BZ    NEXTUCB             NO
         TM    UCBFL1,X'40'        NOT READY?
         BO    NEXTUCB             YES
         TM    SW,MSS              MSS REQUESTED?
         BO    VSTOR               YES, CONTINUE
         TM    UCBTYP+1,X'08'      IS THIS A VIRTUAL VOLUME
         BO    NEXTUCB             YES, IGNORE MSS VOLUME
VSTOR    EQU   *
         MVC   DYNVOL,UCBVOLI      MOVE VOLSER TO DYNALLOC LIST
         LA    R1,DYNPARM          ADDRESS OF DYNALLOC PARM
         SVC   99                  ALLOCATE THE DEVICE
         MVC   IEFRDER+DCBDDNAM-IHADCB(8),DYNDDN MODIFY DCB DDNAME
         LTR   R15,R15             CHECK RETURN CODE
         BZ    PROCESS             O.K, CONTINUE
         MVC   DYNWTO+23,UCBVOLI   MODIFY MESSAGE TEXT
DYNWTO   WTO   'DADSM - VOLUME XXXXXX NOT PROCESSED, DYNALLOC FAILED', X
               ROUTCDE=11          INFORM USER
         B     NEXTUCB             PROCESS NEXT DEVICE
***********************************************************************
**                                                                   **
**       FOR EACH DEVICE TO BE PROCESSED, INVOKE THE LSPACE SVC      **
**       (SVC-78) TO DETERMINE VOLUME FREE SPACE.                    **
**                                                                   **
**       BUILD A VOLUME TABLE ENTRY FOR EACH VOLUME ON WHICH LSPACE  **
**       WAS SUCCESSFUL- DYNAMICALLY ALLOCATE THE DEVICE AND OPEN    **
**       THE VTOC FOR THE VOLUME FOR EXCP ACCESS.                    **
**       READ ALL FORMAT ONE DSCB'S ON THE VOLUME BUILDING           **
**       THE DATASET AND INDEX TABLES CONCURRENTLY                   **
**                                                                   **
***********************************************************************
* PROCESS  LA    R4,VOLRMSG          PU VOLUME MESSAGE AREA
PROCESS  EQU   *
         L     R4,VFREE            PU FREE VOLUME ENTRY
*        LSPACE MF=I,MSG=(4),UCB=(9)
         LSPACE MF=I,DATA=(4),UCB=(9)
         LTR   R15,R15             TEST RETURN
         BZ    LSPCOK              LSPACE FUNCTION IS O.K.
         EX    R15,* <------------ 0C3 ABEND
         BNZ   VERR1               LSPACE FAILURE
LSPCOK   EQU   *
*        L     R4,VFREE            PU FREE VOLUME ENTRY
         USING VOLDSECT,R4
*        MVC   VOLREPLY,VOLRMSG    VOLUME INFORMATION
         MVC   VOLSER,UCBVOLI      VOLUME SERIAL
         MVC   VOLSTAB,UCBSTAB     STATUS
         MVC   VOLDMCT,UCBDMCT     USE
         UCBDEVN DEVN=VOLNAME      CONVERT DEVICE NUMBER TO DISPLAY
         LA    R4,VOLNGH(R4)       BUMP ENTRY PTR
         C     R4,VEND             CHECK BOUNDS
         BH    VERR2               MESSAGE ON OVERFLOW
         ST    R4,VFREE            STORE IN FREE PTR
         DROP  R4                  UNADDRESS
         LA    R4,JFCB1            PT JFCB WORKAREA
         USING JFCB,R4
         MVI   JFCBTSDM,X'08'      SUPPRESS WRITEBACK
         MVC   JFCBDSNM,=44X'04'   FORMAT 4 DSNAME
         MVI   JFCBNVOL,1          ONE VOL AT A TIME
         MVC   JFCBVOLS,UCBVOLI    VOLUME SERIAL
         MVC   SAVOL,UCBVOLI       SAVE CURRENT VOLUME SERIAL #
         DROP  R9
         DROP  R4
         LA    R4,IEFRDER          PT EXCP DCB
         USING IHADCB,R4
         OPEN  (IEFRDER),MF=(E,OPENLST),TYPE=J,MODE=24
         TM    DCBOFLGS,OPEN       CHECK OPEN RETURN
         BNO   FERR1               FATAL ERROR
         L     R8,DCBDEBAD         PU DEB ADDRESS
         DROP  R4
         USING DEBBASIC,R8
         LA    R8,DEBBASND         PT DEVICE SECTION
         DROP  R8
         USING DEBDASD,R8
         LA    R7,IOB1             PT IOB WORKAREA
         USING IOBSTDRD,R7
         MVI   IOBFLAG1,X'42'      SETUP IOB FOR VTOC I/O
         LA    R1,ECB1             STORE ECB ADDRESS
         ST    R1,IOBECBPT
         LA    R1,CP1              STORE CHANNEL PROGRAM ADDRESS
         ST    R1,IOBSTART
         LA    R1,IEFRDER          STORE DCB ADDRESS
         ST    R1,IOBDCBPT
         MVC   IOBCC(4),DEBSTRCC   MOVE VTOC START LOCATION
         MVI   IOBR,1              FMT4 RECORD NUMBER
         DROP  R8
         BAS   RLNK,EXCP1
         LA    R6,DSCB1+44         PT FORMAT FOUR ID
         USING IECSDSF4,R6
         CLI   DS4IDFMT,C'4'       JUST MAKING SURE
         BNE   F4ERR               ITS KIND OF IMPORTANT
         MVC   HIWATER,DS4HPCHR    VTOC HIGH FMT 1 CCHHR
         MVC   DEV#TRKS,DS4DEVSZ+2  #TRKS/CYL
         MVC   DEV#DSCB+1(1),DS4DEVDT  #:SCB'S PER TRACK
         DROP  R6
         SPACE 2
READLOOP DS    0H
         BAS   RLNK,INCRSEEK       INCREMENT SEEK ADDRESS AND CHECK
         BAS   RLNK,EXCP1          ISSUE READ
         LA    R6,DSCB1            PT DSCB WORK
         USING IECSDSF1,R6
         CLI   DS1FMTID,C'1'       SKUP UNLESS FORMAT ONE
         BNE   READLOOP            SKIP IF NOT
         SPACE 2
***********************************************************************
**                                                                   **
**       BUILD DATASET AND INDEX TABLE ENTRIES FOR EACH FORMAT       **
**       ONE DSCB.  READ FORMAT TWO AND THREE IF PRESENT TO          **
**       ACCUMULATE NUMBER OF EXTENTS AND SPACE ALLOCATION.  MOVE    **
**       DATASET CHARACTERISTICS TO DATASET ENTRY.  THEN BINARY      **
**       SEARCH THE INDEX LEVEL TREE, BUMP DATASET COUNT AND         **
**       ALLOCATION TOTALS FOR THIS SUBSYSTEM.                       **
**                                                                   **
***********************************************************************
         L     R1,TOT#DSN
         LA    R1,1(R1)
         ST    R1,TOT#DSN
         L     R8,DAVAIL           PU PTR TO AVAILABLE ENTRY SLOT
         LA    R2,DSNLNGH(R8)      PT NEXT
         C     R2,DEND             CHECK LIMIT
         BH    DSERR1              DATASET TABLE OVERFLOW
         ST    R2,DAVAIL           STORE BACK
         USING DSNSECT,R8
         MVC   DSNAME,DS1DSNAM     MOVE DATASET CHARACTERISTICS
         MVC   DSVOL,SAVOL         VL
         MVC   DSORG,DS1DSORG      MOVE DSORG
         MVC   DSRECFM+1(1),DS1RECFM  MOVE RECFM
         MVC   DSLRECL,DS1LRECL    MOVE LRECL
         MVC   DSBLKSIZ,DS1BLKL    MOVE BLOCK SIZE
         MVC   DSCREDT,DS1CREDT    MOVE CREATION DATE
         MVC   DSREFDT,DS1REFD     MOVE LAST REFERENCED DATE
         MVC   DSUSED,DS1LSTAR     STORE LAST USED TRACK OFFSET
         LH    R1,DSUSED           CONVERT RELATIVE TT
         LA    R1,1(R1)            TO TOTAL TRACKS
         STH   R1,DSUSED
         L     R0,TOT#USE
         AR    R0,R1
         ST    R0,TOT#USE
**       ACCUMULATE NUMBER OF EXTENTS IN R2                          **
**                  TOTAL TRACKS ALLOCATED IN R3                     **
         MVC   IOBSAVE,IOBCC       SAVE SEEK ADDRESS
         SLR   R2,R2               INIT
         SLR   R3,R3
         LA    R4,3                FIRST THREE EXTENTS
         LA    R5,DS1EXT1          PT EXTENT DESCRIPTORS
         BAS   RLNK,ACCLOOP        ACCUMULATE ALLOC AND EXTS
         OC    DS1PTRDS,DS1PTRDS   CHECK FOR TWO OR THREE
         BZ    ENACC               END IF NONE
         MVC   IOBCC(5),DS1PTRDS   MOVE SEEK OF NEXT IN CHAN
         BAS   RLNK,EXCP1          READ IT
         CLI   DSCB1,2             IS IT ISAM
         BNE   FMT3                NO  BRANCH
         OC    DS1PTRDS,DS1PTRDS   CHECK NEXT CHAIN PTR
         BZ    ENACC               BRANCH OUT
         MVC   IOBCC(5),DS1PTRDS   SET SEEK OF FMT3
         BAS   RLNK,EXCP1          READ IT
FMT3     LA    R4,4                FOUR EXTENTS
         LA    R5,DSCB1+4          START OF DESCRIPTORS
         BAS   RLNK,ACCLOOP        ACCUMULATE
         LA    R4,9                NINE OF EM
         LA    R5,DSCB1+45         FIRST
         BAS   RLNK,ACCLOOP
ENACC    MVC   IOBCC(5),IOBSAVE    RESTORE SEEK POSITION
         STC   R2,DS#EXTS          STORE NUMBER OF EXTENTS
         STH   R3,DSALLOC          STORE NUMBER OF TRACKS ALLOCATED
         L     R1,TOT#TRK
         AR    R1,R3
         ST    R1,TOT#TRK
         SPACE 2
***********************************************************************
**                                                                   **
**       HSMCHECK - IF THE DATASET SECOND LEVEL QUALIFIER IS HMIG    **
**                  AND A MCDS DDCARD IS PRESENT, THE HSM MCDS       **
**                  WILL BE QUERIED FOR REAL DATASET NAME AND ATTRIB **
**                  THE DSCB VALUES FOR DISK SPACE WILL BE RETAINED  **
**                                                                   **
***********************************************************************
         SPACE 2
HSMCHECK EQU   *
         CLI   HSMSW,C'N'          WAS HSM MCDS DDCARD NOT PRESENT?
         BE    HSMEXIT             NO DDCARD, EXIT
         LA    R2,DSNAME+2         BEGIN SEARCH FOR 'HMIG'
         LA    R3,16               SCAN 16 CHARACTERS
HSM010   EQU   *
         CLC   0(4,R2),=CL4'HMIG'  HMIG TEST
         BE    HSM020
         LA    R2,1(R2)            INCREMENT R2
         BCT   R3,HSM010           TRY TEST AGAIN
         B     HSMEXIT
HSM020   EQU   *
         MVC   VSAMKEY,DSNAME      MOVE DSNAME FOR HSM MCDS QUERY
         GET   RPL=VDIRRPL         GET A RECORD
         LTR   R15,R15             CHECK FOR ERROR
         BNZ   HSMEXIT             ERROR, FORGET IT
         USING MCKRECRD,R2         INFORM ASSEMBLER R2 MCA DSECT BASE
         L     R2,VSAMADDR         SET R2=VSAM RECORD ADDRESS
         CLI   46(R2),X'11'        MIGRATION COPY NAME(MCA) RECORD ?
         BE    HSM025              YES, GOTO P28190
         WTO   'HMIG MCA ',ROUTCDE=11
         ABEND 999,DUMP
HSM025   EQU   *
         MVC   DSNAME,MCAINTNM     MOVE ALIAS NAME(REAL DSNAME)
         DROP  R2                  DROP MCA BASE
         MVC   DSVOL,=CL6'MIGRAT'  SET VOLUME TO MIGRAT
         MVI   DS#EXTS,X'FF'       PASS SWITCH FOR HSM REC
         MVC   VSAMKEY,DSNAME      MOVE REAL DSN FOR HSM MCDS QUERY
         GET   RPL=VDIRRPL         GET A RECORD
         LTR   R15,R15             CHECK FOR ERROR
         BNZ   HSMEXIT             ERROR, FORGET IT
         USING MCKRECRD,R2         INFORM ASSEMBLER RD MCA DSECT BASE
         L     R2,VSAMADDR         SET R2=VSAM RECORD ADDRESS
         CLI   46(R2),X'00'        MIGRATION CONTROL(MCD) RECORD ?
         BE    HSM030              YES, GOTO P28190
         WTO   'HMIG MCD',ROUTCDE=11
         ABEND 999,DUMP
HSM030   EQU   *
         MVC   DSCREDT,MCDDLC+1    MOVE CREATION DATE
         MVC   DSREFDT,MCDDLR+1    MOVE LAST REFERENCED DATE
         MVC   DSORG,MCDDSORG      MOVE DATASET ORGANIZATION
         MVC   DSALLOC,MCDSIZE+2   MOVE TRACKS ALLOCATED
         MVC   DSRECFM,MCDRECFM    MOVE RECORD FORMAT
         MVC   DSBLKSIZ,MCDBLKSZ   MOVE BLOCK SIZE
*        MVC   DS#EXTS,MCDCOMPR    COMPRESSION SAVINGS
         DROP  R2                  DROP MCA BASE
HSMEXIT  EQU   *                   FINISHED WITH HSM MCDS CHECK
***********************************************************************
**                                                                   **
**       BUILD INDEX ENTRY OR INCREMENT EXISTING ONE.                **
**       INDEX ENTRIES ARE STORED AS A BINARY TREE(SYMBOL TABLE)     **
**       STRUCTURE FOR SPEED IN SEARCHING. STATISTICS KEPT FOR  EACH **
**       SUBSYSTEM ARE NUMBER OF DATASETS AND TOTAL TRACKS ALLOCATED **
**                                                                   **
***********************************************************************
         SPACE
**       SETUP INPTINX FIELD BY PARSING DSNAME                       **
         MVC   INPTINX,=CL8' '     CLEAR STORAGE
         LA    R1,DSNAME+1         ASSUME FIRST CHAR EXISTS
         LA    R2,1                INCREMENT VALUE
         LA    R3,DSNAME+8         LIMIT
         LA    R4,0                MACHINE FORM OF LENGTH
PAR1     CLI   0(R1),C'A'          CHECK FOR DELIMITER
         BL    P2                  AND OUT
         LA    R4,1(R4)            BUMP LENGTH
         BXLE  R1,R2,PAR1          SCAN
P2       EX    R4,MVCINX           MOVE TO WORKAREA
         USING INXSECT,R2
         SLR   R0,R0               CONTANT FOR COMPARES
         L     R2,IROOT            PU ROOT PTR
         LTR   R2,R2               TEST
         BNZ   T2                  SKIP UNLESS FIRST TIME
         L     R2,IAVAIL           PU SLOT PTR
         ST    R2,IROOT            SET FIRXT
         B     T56                 TO CREATE ENTRY
T2       CLC   INPTINX,INDEX       COMPARE INPUT TO ENTRY
         BE    T6                  BUMP ENTRY
         BH    T4                  CHASE CHAIN
T3       C     R0,LLINK            CHECK LEFT SUBTREE
         BE    T5                  STORE NEW
         L     R2,LLINK            ELSE PU AND RUN
         B     T2                  SEE WHAT I MEAN
T4       C     R0,RLINK            CHECK DIS SIDE TOO
         BE    T5
         L     R2,RLINK
         B     T2                  CHASE
T5       L     R1,IAVAIL           SLOT FREE
         EX    R4,CLCINX           TO SEE HOW WE GOT HERE
         BH    T52                 IF VIA RIGHT TREE
         ST    R1,LLINK            ELSE STORE LEFT
         B     T54                 AROUND
T52      ST    R1,RLINK            STORE RIGHT
T54      LR    R2,R1               ROOL ADDRESSIBILITY
T56      XC    INXSECT(ILNGH),INXSECT  CLEAR NEW ENTRY
         MVC   INDEX,INPTINX       STORE INDEX
         LA    R1,ILNGH(R2)
         C     R1,IEND
         BH    IERR1
         ST    R1,IAVAIL
T6       LH    R1,ICOUNT           BUMP DATASET COUNT
         LA    R1,1(R1)
         STH   R1,ICOUNT           STORE BACK
         LH    R1,DSALLOC          PU ALLOCATED TRACKS
         A     R1,IALLOC           ADD PREVIOUS TOTAL
         ST    R1,IALLOC           STORE BACK
         LH    R1,DSUSED
         A     R1,IUSED
         ST    R1,IUSED
         B     READLOOP
         SPACE 2
MVCINX   MVC   INPTINX(0),DSNAME   SKELETON MOVE
CLCINX   CLC   INPTINX(0),INDEX    COMPARE INPUT TO ENTRY
         DROP  R2
EODAD    CLOSE (IEFRDER),MF=(E,CLOSLST),MODE=31 CLOSE THE VTOC
         TM    SW,MODE2            IS THIS MODE-1?
         BO    NEXTTIOT            N, GET NEXT TIOT DEVICE
         B     NEXTUCB             Y, GET NEXT LUT ENTRY
         SPACE 2
NEOJ     DS    0H
         NOP   NOSORT
         SORT  START=VSTART,END=VFREE,ENTRYL=VOLNGH,                   *
               KEYLEN=6,KEYOFF=0,MODE=A
         SORT  START=ISTART,END=IAVAIL,ENTRYL=ILNGH,                   *
               KEYLEN=8,KEYOFF=8,MODE=A
         SORT  START=DSTART,END=DAVAIL,ENTRYL=DSNLNGH,                 *
               KEYLEN=44,KEYOFF=0,MODE=A
NOSORT   DS    0H
         MVOUT VSTART,VOLNGH,VFREE,VMODE,VPRINT
         MVOUT ISTART,ILNGH,IAVAIL,IMODE,IPRINT
         L     R1,BUFLOC
         MVC   0(121,R1),HT1
         BAS   RLNK,PRINT
         L     R1,BUFLOC
         USING TOTSECT,R1
         MVI   0(R1),C' '
         MVC   1(120,R1),0(R1)
         L     R0,TOT#DSN
         CVD   R0,DW
         MVC   TOTDSN,=X'4020202020202120'
         ED    TOTDSN,DW+4
         L     R0,TOT#TRK
         CVD   R0,DW
         MVC   TOTCNT,=X'4020202020202120'
         ED    TOTCNT,DW+4
         L     R0,TOT#USE
         CVD   R0,DW
         MVC   TOTUSE,=X'4020202020202120'
         ED    TOTUSE,DW+4
         SLR   R8,R8
         L     R15,TOT#TRK
         L     R9,TOT#USE
         MH    R9,=H'1000'         SCALING FACTOR
         DR    R8,R15
         STH   R9,WORK1
         LH    R0,WORK1            FIELD TO CONVERT
         CVD   R0,DW               CONVERT TO DECIMAL
         MVC   TOTPCT,MASK5        MOVE MASK FIELD
         ED    TOTPCT,DW+6         MAKE IT PRINTABLE
         BAS   RLNK,PRINT
         DROP  R1
         MVOUT DSTART,DSNLNGH,DAVAIL,DMODE,DPRINT
         SLR   R15,R15             SET ZERO RETURN
RETURN   EQU   *                   SYSTEM SAVEAREA
         CLOSE (MCDS),MODE=31      CLOSE FILE
         CLOSE (SYSPRINT),MF=(E,CLOSLST),MODE=31     CLOSE PRINTER
         L     R2,PPARM
         STORAGE RELEASE,LENGTH=(2),ADDR=PSTART
         L     R2,VPARM
         STORAGE RELEASE,LENGTH=(2),ADDR=VSTART
         L     R2,IPARM
         STORAGE RELEASE,LENGTH=(2),ADDR=ISTART
         L     R2,DPARM
         STORAGE RELEASE,LENGTH=(2),ADDR=DSTART
         L     R13,4(R13)          SYSTEM SAVEAREA
         LM    R0,R12,20(R13)      RESTORE
         L     R14,12(R13)         RETURN ADDRESS
         BR    R14                 BYBY
         DROP  R8
HSMEODAD EQU   *
         WTO   'EODAD MCDS',ROUTCDE=11
         ABEND 999,DUMP
         TITLE 'DADSM-    SUBROUTINES'
ACCLOOP  CLI   0(R5),0             CHECK FOR DATA IN EXTENT
         BE    ENACC               BRANCH OUT IF NONE
         LA    R2,1(R2)            ELSE BUMP EXTENT COUNT
         LH    R0,6(R5)            PU HIGN CC
         MH    R0,DEV#TRKS         TIMES  DEVICE CHAR
         AH    R0,8(R5)            ADD HIGH TRACKS
         LH    R1,2(R5)            LO W CC
         MH    R1,DEV#TRKS
         AH    R1,4(R5)            LOW TT
         SR    R0,R1               TOTAL
         LA    R3,1(R3)            BUMP FOR TRUE TOTAL
         AR    R3,R0               INCR
         LA    R5,10(R5)           PT NEXT DESC
         BCT   R4,ACCLOOP
         BR    RLNK                RETURN
         TITLE 'DADSM-    EXCP ROUTINE'
         SPACE 2
**       ISSUE EXCP AND WAIT
EXCP1    DS    0H
         XC    ECB1,ECB1
         EXCP  IOB1
         WAIT  ECB=ECB1
         TM    ECB1,X'7F'
         BOR   RLNK                RETURN TO CALLER
EXCPERR  ABEND 20,DUMP
         SPACE 2
**       INCREMENT SEEK ADDRESS AND EXTENT CHECKING
INCRSEEK EQU   *
         MVC   SECR0,SECR1         SWAP SECTOR VALI
         SLR   R1,R1               CLEAR WORK REGISTER
         IC    R1,IOBR             PU REC NUM
         LA    R1,1(R1)            INCREMENT RECORD NUMBER
         STC   R1,IOBR             STORE BACK
         CH    R1,DEV#DSCB         CHECK LIMIT FOR DEVICE
         BNH   CHKEXT              IF OK...BRANCH TO EXTENT CHECK
INCRTRK  ICM   R1,B'0011',IOBHH    PU TRACK ADDRESS
*              FROM IOBSEEK
         LA    R1,1(R1)            INCREMENT IT
         STCM  R1,B'0011',IOBHH    STORE BACK
         MVI   IOBR,1              RECORD NUMBER 1
         CLC   DEV#TRKS,IOBHH      CHECK AGIN DEVICE LIMIT
         BH    CHKEXT              OK...CHECK EXTENT LIMITS
         ICM   R1,B'0011',IOBCC    ELSE PU CYL ADDRESS
         LA    R1,1(R1)            ENCREMENT
         STCM  R1,B'0011',IOBCC    STORE SEEK
         MVC   IOBHH,=H'0'         ZERO TRACK
CHKEXT   CLC   HIWATER,IOBCC       CHECK VTOC HIGH WATER
         BL    EODAD               END OF EXTENT ROUTINE WHEN HIGH
         BR    RLNK                ELSE RETURN
         DROP  R7
         TITLE 'DADSM-    PRINT ROUTINE'
PRINTMSG EQU   *                   INPUT IS MESSAGE LOCATION IN R2
         ST    R2,WORK4
         L     R2,BUFLOC           INSERT BUFFER ADDRESS
         SLR   R3,R3               CLEAR ICREG
         IC    R3,0(R1)            INSERT MESSAGE LENGTH
         BCTR  R3,0                DECREMENT TO MACHINE FORM
         EX    R3,MVCMSG           MOVE MESSAGE TO BUFFER
         L     R2,WORK4
         B     PRINT               PUT THE DUDE OUT
MVCMSG   MVC   1(*-*,R2),1(R1)     MOVE MESSAGE SKELETON
PRINTHDR EQU   *                   HEADER PRINT ROUTINE
         TIME  ,                   GET TIME AND DATE FOR HEADER
         STM   R0,R1,WORK1         STORE FOR LATER
         MVC   TIME(8),MASK1
         ED    TIME(8),WORK1
         MVC   DATE(7),MASK2       MOVE EDIT MASK
         ED    DATE(7),WORK2+1
         AP    PAGECTR,P1
         MVC   PAGE(4),=X'40202120'
         ED    PAGE(4),PAGECTR     PUT PAGE # IN HEADER
         ZAP   LINECTR,P0          ZERO LINE COUNTER
TOPPAGE  PUT   SYSPRINT            GET A BUFFER
         MVC   0(121,R1),HDR1      PUT HEADER IN IT
         PUT   SYSPRINT            GET NEXT BUFFER
         TM    SW,VMODE            TEST FOR VOLUME PRINT PHASE
         BO    VOLHDR              PRINT CORRESPONDING HEADERS
         TM    SW,IMODE            INDEX
         BO    INXHDR
         TM    SW,DMODE
         BO    DSNHDR
         PUT   SYSPRINT            GET BUFFER
         ST    R1,BUFLOC           IF PRIME OPERATION ONLY
         BR    RLNK                RETURN
VOLHDR   MVC   0(121,R1),HV1
         PUT   SYSPRINT
         MVC   0(121,R1),HV2
         PUT   SYSPRINT
         B     STLOC
INXHDR   DS    0H
         MVC   0(121,R1),HI1
         PUT   SYSPRINT
         MVC   0(121,R1),HI2
         PUT   SYSPRINT
         B     STLOC
DSNHDR   DS    0H
         MVC   0(121,R1),HD1
         PUT   SYSPRINT
         MVC   0(121,R1),HD2
         PUT   SYSPRINT
STLOC    DS    0H
         MVI   0(R1),C' '
         MVC   1(120,R1),0(R1)
PRINT    EQU   *
         CP    LINECTR,PAGELIM     CHECK LINE LIMIT
         BH    PRINTHDR            PRINT HEADER WHEN REACHED
PRTLINE  PUT   SYSPRINT            GET BUFFER
         ST    R1,BUFLOC           SAVE LOCATION
         MVI   0(R1),C' '          SET SINGLE SPACE CONTROL
         MVC   1(120,R1),0(R1)     CLEAR LINE
         AP    LINECTR,P1          INCREMENT LINE COUNTER
         BR    RLNK                ELSE RETURN TO MAINSTREAM
         USING VOLDSECT,R3
         USING VLINE,R1
VPRINT   DS    0H
         L     R1,BUFLOC
         MVI   0(R1),C' '
         MVC   1(120,R1),0(R1)
         MVC   VVOL,VOLSER
         MVC   VUNIT,VOLNAME
*        MVC   VFRCYL,VOLREPLY+6
         L     R0,LSPDTTRK
         CVD   R0,DW
         MVC   VFRTRK,=X'402020202020'
*        MVC   VFRCYL,=X'2020202020202020202120'
         ED    VFRTRK,DW+5
         L     R0,LSPDTCYL
         CVD   R0,DW
         MVC   VFRCYL,=X'40202020202120'
         ED    VFRCYL(6),DW+5
         MVI   VFRCYL+6,C'/'
*        MVC   V#EXT,VOLREPLY+16
         L     R0,LSPDNEXT
         CVD   R0,DW
         MVC   V#EXT,=X'40202020202020202120'
         ED    V#EXT,DW+6
*        MVC   VLARG,VOLREPLY+21
         L     R0,LSPDLTRK
         CVD   R0,DW
         MVC   VLARGT,=X'402020202020'
         ED    VLARGT,DW+5
         L     R0,LSPDLCYL
         CVD   R0,DW
         MVC   VLARGC,=X'402020202120'
         ED    VLARGC,DW+5
         MVI   VLARGC+6,C'/'
         LA    R9,3                BCT COUNT
         LA    R8,STABTAB          PT TABLE
         NI    VOLSTAB,B'00011100'  MASK EXES BITS
V0010    CLC   VOLSTAB,0(R8)       COMPARE INDICATORS
         BE    V0020               OUT ON MATCH
         LA    R8,8(R8)            BUMP ONE
         BCT   R9,V0010            BACK TRACK
V0020    MVC   VUSE,1(R8)          MOVE IT OTU
         BAS   RLNK,PRINT
         BR    RLNK2
         DROP  R1
         DROP  R3
         SPACE 2
         USING ILINE,R1
         USING INXSECT,R3
IPRINT   DS    0H
         L     R1,BUFLOC
         MVI   0(R1),C' '
         MVC   1(120,R1),0(R1)
         MVC   IINX,INDEX
         LH    R0,ICOUNT
         CVD   R0,DW
         MVC   I#DSN-1(4),MASK3
         ED    I#DSN-1(4),DW+6
         L     R0,IALLOC
         CVD   R0,DW
         MVC   I#TRK,=X'4020202020202120'
         ED    I#TRK,DW+4
         L     R0,IUSED
         CVD   R0,DW
         MVC   I#USED,=X'4020202020202120'
         ED    I#USED,DW+4
         MVC   IPCT,=C'100.0'
         SLR   R8,R8
         L     R15,IALLOC
         L     R9,IUSED
         CR    R9,R15
         BE    IPCTALL
         LTR   R15,R15             CHECK FOR ZERO DIVISOR S0C9
         BZ    DPCT
         MH    R9,=H'1000'         SCALING FACTOR
         DR    R8,R15
         STH   R9,WORK1
DPCT     LH    R0,WORK1            FIELD TO CONVERT
         CVD   R0,DW               CONVERT TO DECIMAL
         MVC   IPCT,MASK5          MOVE MASK FIELD
         ED    IPCT,DW+6           MAKE IT PRINTABLE
IPCTALL  XC    WORK1,WORK1
         BAS   RLNK,PRINT
         BR    RLNK2
         DROP  R1
         DROP  R3
         SPACE 2
         USING DLINE,R1
         USING DSNSECT,R3
DPRINT   DS    0H                  PRINT DATASET ENTRIES
         L     R1,BUFLOC           PU BUFFER ADDREA
         MVI   0(R1),C' '
         MVC   1(120,R1),0(R1)
         MVC   DDSN,DSNAME
         MVC   DVOL,DSVOL
         LH    R0,DSALLOC          FIELD TO CONVERT
         CVD   R0,DW               CONVERT TO DECIMAL
         MVC   WORK1(6),MASK7      MOVE MASK FIELD
         ED    WORK1(6),DW+5       MAKE IT PRINTABLE
         MVC   DALLOC,WORK1+1      MOVE TO OUTPUT
         LH    R0,DSUSED           FIELD TO CONVERT
         CVD   R0,DW               CONVERT TO DECIMAL
         MVC   WORK1(6),MASK7      MOVE MASK FIELD
         ED    WORK1(6),DW+5       MAKE IT PRINTABLE
         MVC   DUSED,WORK1+1       MOVE MASK FIELD
D0002    EQU   *
         CLC   DSVOL,=C'MIGRAT'    IS THE MIGRATED DATASET?
         BNE   D0006
         MVC   DRECFM,=CL4' '      CLEAR RECFM   FOR HSM DATASETS
         MVC   DBLKSIZ,=CL5' '     CLEAR BLKSIZ  FOR HSM DATASETS
         MVC   DLRECL,=CL5' '      CLEAR LRECL   FOR HSM DATASETS
         MVC   D#EXT,=CL2' '       CLEAR #EXTS   FOR HSM DATASETS
         MVC   DDSORG,=CL2' '      CLEAR DSORG   FOR HSM DATASETS
         CLI   DS#EXTS,X'FF' IS COMPRESSION GIVEN?
         BE    D0006               NO, DONT PROVIDE
         SR    R0,R0
         ICM   R0,1,DS#EXTS        DS#EXTS FOR HSM USED TO PASS
         CVD   R0,DW                 THE HSM COMPRESSION FACTOR
         UNPK  DMISC(2),DW+6
         OI    DMISC+1,X'F0'
         MVC   DMISC+2(13),=C'% COMPACTION '
D0006    EQU   *
         LH    R0,DSLRECL          FIELD TO CONVERT
         CVD   R0,DW               CONVERT TO DECIMAL
         MVC   WORK1(6),MASK7      MOVE MASK FIELD
         ED    WORK1(6),DW+5       MAKE IT PRINTABLE
         MVC   DLRECL,WORK1+1      MOVE TO OUTPUT
D0080    EQU   *                   END OF HSM PARMS
         LH    R0,DSBLKSIZ         FIELD TO CONVERT
         CVD   R0,DW               CONVERT TO DECIMAL
         MVC   WORK1(6),MASK7      MOVE MASK FIELD
         ED    WORK1(6),DW+5       MAKE IT PRINTABLE
         MVC   DBLKSIZ,WORK1+1     MOVE TO OUTPUT
         LA    R8,DSORGTBL
D0010    CLC   DSORG,0(R8)
         BE    D0020
         LA    R8,4(R8)
         CLC   =H'0',0(R8)         TABLE END INDICATOR
         BNE   D0010               BACK IT
D0020    MVC   DDSORG,2(R8)        MOVE IT ANYHOW
         LA    R8,RECFMTBL
         MVI   BYTE,0
         SLR   R9,R9
D0040    IC    R9,0(R8)
         EX    R9,TMT              TEST IF DONE THIS ONE
         BNZ   D0050               SKIP
         EX    R9,TM
         BO    D0060
D0050    LA    R8,5(R8)
         CLI   0(R8),0             END
         BE    D0070               YES
         B     D0040
D0060    EX    R9,OI
         OC    DRECFM,1(R8)
         B     D0040
D0070    DS    0H
         CLI   DRECFM+2,C' '
         BNE   D0070A
         MVC   DRECFM+2(1),DRECFM+3
         MVI   DRECFM+3,C' '
D0070A   DS    0H
         SLR   R9,R9
         IC    R9,DS#EXTS
         CVD   R9,DW
         MVC   WORK1(4),MASK3
         ED    WORK1(4),DW+6
         MVC   D#EXT(2),WORK1+2
* D0080    EQU   *                   END OF HSM PARMS
* CREATION DATE ROUTINE
         SLR   R9,R9
         IC    R9,DSCREDT
         LTR   R9,R9
         BZ    D0099               SKIP CRUMMY VSAM CREDT
         CLC   DSVOL,=CL6'MIGRAT'  CREATE DATE FOR MIGRAT?
         BNE   D0085               NO, CONTINUE
         UNPK  DCREDT,DSCREDT
         OI    DCREDT+5,X'F0'
         MVC   DCREDT(2),DCREDT+1
         MVI   DCREDT+2,C'.'
         B     D0099               CONTINUE
D0085    EQU   *
         CVD   R9,DW
         LH    R9,DW+6
         SRL   R9,4
         SLL   R9,16
         SLR   R8,R8
         ICM   R8,3,DSCREDT+1
         CVD   R8,DW
         LH    R8,DW+6
         OR    R8,R9
         ST    R8,WORK1
         MVC   DCREDT,MASK2
         ED    DCREDT,WORK1+1
D0099    DS    0H
* REFERNCE DATE ROUTINE
         SLR   R9,R9
         IC    R9,DSREFDT
         LTR   R9,R9
         BZ    D0099A              SKIP CRUMMY VSAM REFDT
         CLC   DSVOL,=CL6'MIGRAT'  CREATE DATE FOR MIGRAT?
         BNE   D0099B              NO, CONTINUE
         UNPK  DREFDT,DSREFDT
         OI    DREFDT+5,X'F0'
         MVC   DREFDT(2),DREFDT+1
         MVI   DREFDT+2,C'.'
         B     D0099A              CONTINUE
D0099B   EQU   *
         CVD   R9,DW
         LH    R9,DW+6
         SRL   R9,4
         SLL   R9,16
         SLR   R8,R8
         ICM   R8,3,DSREFDT+1
         CVD   R8,DW
         LH    R8,DW+6
         OR    R8,R9
         ST    R8,WORK1
         MVC   DREFDT,MASK2
         ED    DREFDT,WORK1+1
D0099A   DS    0H
         BAS   RLNK,PRINT
         BR    RLNK2
TM       TM    DSRECFM+1,0
OI       OI    BYTE,0
TMT      TM    BYTE,0
         DROP  R1
         DROP  R3
         TITLE 'DADSM-    EXIT AND ERROR ROUTINES'
F4ERR    ABEND 44,DUMP
         SPACE 2
         USING UCBOB,R9
FERR1    MVC   FSMSG1+1(6),UCBVOLI
         LA    R1,FSMSG1           LOAD MESSAGE
         BAS   RLNK,PRINTMSG
         LA    R15,12              LOAD RETURN
         B     RETURN
         DROP  R9
FSMSG1   DC    AL1(19),C'XXXXXX OPENJ FAILED'
         SPACE 2
         DS    0F
SYSERR1  WTO   'DADSM: SYSPRINT OPEN FAILURE',                         *
               ROUTCDE=(2,11),DESC=(7)
         LA    R15,16              RETURN COD%
         B     RETURN
         SPACE 2
         DS    0F
SYSERR2  DS    0H
         WTO   'LISTVTOC I/O ERROR ON SYSPRINT ABENDING',              *
               ROUTCDE=(2,11),DESC=(7)
         ABEND 40,DUMP
         SPACE 2
SYSEXIT1 EQU   *                   EXIT TO CHECK BLKSIZE AND PLUG
         L     R15,ADOPEN31-SYSEXT(,R15)  ENTRY TO DCB OPEN EXIT
         BSM   R14,R15             SWITCH TO 31-BIT AND GO THERE
LENEXIT  EQU   *-SYSEXIT1
SYSEXIT  EQU   *                   EXIT TO CHECK BLKSIZE AND PLUG
         LH    R2,DCBBLKSI-IHADCB(R1)
         LTR   R2,R2               IS IT ZERO
         BNZ   SYSOUTX             IF NOT RETURN TO OPEN
         LA    R2,121              IF SO PLUG 121 DEFAULT
         LH    R2,DCBBLKSI-IHADCB(R1)
SYSOUTX  BSM   0,R14               GO BACK TO BIG OS
U0012    ABEND 12,DUMP             ABEND ON INVALID UCB
         SPACE
VERR1    MVI   MSGWORK,79          LENGTH
         MVC   MSGWORK+1(14),=C'DADSM: VOLUME '
         MVC   MSGWORK+14(6),SAVOL
         MVC   MSGWORK+24(30),0(R1)  LSPACE MESSAGE
         LA    R1,MSGWORK
         BAS   RLNK,PRINTMSG
         LA    R15,8
         B     RETURN
MSGWORK  DC    CL80' '
         SPACE
VERR2    LA    R1,VOLMSG2
         BAS   RLNK,PRINTMSG
         LA    R15,8
         B     RETURN
         DS    0F
VOLMSG2  DC    AL1(80),CL80'DADSM:  VOLUME TABLE OVERFLOW'
         SPACE 2
IERR1    LA    R1,IDXMSG2
         BAS   RLNK,PRINTMSG
         LA    R15,8
         B     RETURN
IDXMSG2  DC    AL1(80),CL80'DADSM:  INDEX TABLE OVERFLOW'
         SPACE
DSERR1   LA    R1,DSMSG1
         BAS   RLNK,PRINTMSG
         LA    R15,8
         B     RETURN
         DS    0F
DSMSG1   DC    AL1(80),CL80'DADSM:  DATASET TABLE OVERFLOW'
         SPACE 2
PARMERR  WTO   'DADSM: INVALID PARM SPECIFIED',ROUTCDE=11
         ABEND 99,DUMP
         SPACE
         TITLE 'DADSM-    WORKAREAS,CONSTANTS,EQUATES,DSECTS'
         LTORG
         CNOP  0,4
MOD24    DC    X'7FFFFFFF'    FOR SETTING AMODE 24
MOD31    DC    X'80000000'    FOR SETTING AMODE 31
WORKAREA DC    XL100'00'      IOSVSUCB WORK AREA
TIOTPOSN DC    A(0)                PLACEHOLDER FOR TIOT ENTRY
PSTART   DC    A(0)                DCB START
PFREE    DC    A(0)                DCB START
PEND     DC    A(0)                END OF VOLUME TABLE
PPARM    DC    A(IOALNG)           SPACE FOR ONE
VSTART   DC    A(0)                VOLUME TABLE START
VFREE    DC    A(0)                VOLUME TABLE FREE SLOT
VEND     DC    A(0)                END OF VOLUME TABLE
VPARM    DC    A(MAXVOLS*VOLNGH)   OR MANY
ISTART   DC    A(0)                START OF INDEX TABLE
IAVAIL   DC    A(0)                NEXT AVAIL INDEX SLOT
IEND     DC    A(0)                END OF TABLE
IROOT    DC    A(0)                ROOT OF INDEX TREE
IPARM    DC    A(MAXINX*ILNGH)
DSTART   DC    A(0)                DATASET TABLE START
DAVAIL   DC    A(0)                NEXT DATASET TBL SLOT
DEND     DC    A(0)                END OF DATASET TABLE
DPARM    DC    A(MAX#DSN*DSNLNGH)
*        DYNAMIC ALLOCATION LIST FOR THE SYSOUT INPUT FILE            *
         DS    0F                 MUST BE FULLWORD ALIGNED
DYNPARM  DC    A(DYNBLK)          ADDRESS OF DYNALLOC BLOCK
DYNBLK   DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST
         DC    F'0'               ERROR/INFO CODES (RETURNED)
         DC    A(DYNTUC)          START OF TEXT UNIT POINTER CHAIN
         DC    A(0)               RESERVED
         DC    A(0)               FLAGS
DYNTUC   DC    A(DYNTU1,DYNTU2,DYNTU3,DYNTU4,DYNTU5,DYNTU6)
DYNTUC1  DC    A(DYNTU7)
DYNTU1   DC    X'0002',AL2(1)                   VTOC DSNAME TU
         DC    AL2(12),CL44'FORMAT4.DSCB'
DYNTU2   DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN TU
DYNDDN   DC    CL8' '                           DDNAME RETURNED
DYNTU3   DC    X'0004',AL2(1),AL2(1),X'08'      STATUS TU (SHR)
DYNTU4   DC    X'0005',AL2(1),AL2(1),X'08'      DISP TU (KEEP)
DYNTU5   DC    X'0010',AL2(1),AL2(6)            VOLUME SERIAL TU
DYNVOL   DC    CL6' '                              VOLUME SERIAL
DYNTU6   DC    X'0015',AL2(1),AL2(8),CL8'SYSALLDA' UNIT NAME TU
DYNTU7   DC    X'001C',AL2(0)                   FREE=CLOSE
MCDS     ACB   AM=VSAM,                                                X
               RMODE31=ALL,                                            X
               MACRF=(DIR,SEQ),                                        X
               STRNO=2,                                                X
               EXLST=VSEXITL
VSEXITL  EXLST AM=VSAM,EODAD=(HSMEODAD)
VDIRRPL  RPL   ACB=MCDS,                                               X
               AM=VSAM,                                                X
               OPTCD=(DIR,LOC),                                        X
               AREA=VSAMADDR,                                          X
               AREALEN=4,                                              X
               ARG=VSAMKEY
FDBKAREA DC    F'0'                VSAM FDBK RC AREA
VSAMADDR DC    F'0'                ADDRESS OF VSAM RECORD
VSAMKEY  DC    CL44' '             VSAM RECORD KEY AREA
HSMSW    DS    C                   SHOULD WE REFERENCE THE MCDS (HSM)
         DS    0F
WORK1    DC    F'0'
WORK2    DC    F'0'
WORK3    DC    F'0'
WORK4    DC    F'0'
CP1A     DS    0D                  READ VTOC CHANNEL PROGRAM
*CW1     CCW   X'23',SECR0A,X'40',1  SET SECTOR
CCW1     DC    X'23'
         DS    CL3
         DC    X'40'
         DC    X'000001'
*CW2     CCW   X'31',IOB1A+35,X'40',5
CCW2     DC    X'31'
         DS    CL3
         DC    X'40'
         DC    X'000005'
*CW3     CCW   X'08',*-8,0,0       TIC *-8
CCW3     DC    X'08'
         DS    CL3
         DC    X'00'
         DC    X'000000'
*CW4     CCW   X'0E',DSCB1A,X'20',140  READ KEY AND DATA
CCW4     DC    X'0E'
         DS    CL3
         DC    X'20'
         DC    X'00008C'
*CW5     CCW   X'22',SECR1A,0,1     READ SECTOR
CCW5     DC    X'22'
         DS    CL3
         DC    X'00'
         DC    X'000001'
LCP1A    EQU   *-CP1A
SECR0A   DC    X'00'
SECR1A   DC    X'00'
DEV#DSCB DC    H'0'
DEV#TRKS DC    H'0'
HIWATER  DC    XL5'0'
BYTE     DC    X'00'
BUFLOC   DC    A(0)
PAGECTR  DC    PL2'0'
LINECTR  DC    PL2'0'
PAGELIM  DC    PL2'52'
P1       DC    P'1'
P0       DC    P'0'
IOBSAVE  DC    XL5'00'
EDMSK    DC    PL8'0'
SAVOL    DC    CL6' '
SAVOL1   DC    CL6' '
INPTINX  DC    CL8' '
HV1      DC    CL50' ',CL71'VOLUME SUMMARY'
HV2      DC    CL10'0',CL11'VOLUME',CL11'UNIT',CL10'USE'
         DC    CL17'FREE CYL/TRK'
         DC    CL18'#EXTENTS FREE'
         DC    CL56'LARGEST FREE CYL/TRK'
HI1      DC    CL50' ',CL71'SUBSYSTEM SUMMARY'
HI2      DC    CL16'0',CL15'INDEX',CL25'NUMBER OF DATASETS'
         DC    CL17'TOTAL TRACKS',CL15'TOTAL USED'
         DC    CL33'PERCENTAGE'
HD1      DC    CL50' ',CL71'DATASET SUMMARY'
HD2      DC    CL2'0',CL7'VOLUME',CL6'ALLOC'
         DC    CL5'USED',CL4'ORG',CL4'RFM',CL6'LRECL'
         DC    CL6'BLKSZ',CL4'#E',CL7'CREDT',CL6'REFDT',CL56'DSNAME'
         DC    CL20' '
MASK1    DC    X'20204B20204B2020'
*ASK2    DC    X'20204B202020'
MASK2    DC    X'4020204B202020'
MASK3    DC    X'40202020'
MASK4    DC    X'4020202120'
MASK5    DC    X'4021204B20'
MASK6    DC    X'40202020202120'
MASK7    DC    X'402020202120'
HDR1     DS    0CL121
         DC    CL9'1',CL75'DADSM-   DIRECT ACCESS SPACE MANAGER'
         DC    C'DATE '
DATE     DC    CL6' ',C'  TIME '
TIME     DC    CL8' ',C'  PAGE '
PAGE     DC    CL4' '
         SPACE
DSORGTBL DS    0F
         DC    X'8000',C'IS'
         DC    X'4000',C'PS'
         DC    X'2000',C'DA'
         DC    X'1000',C'CX'
         DC    X'0200',C'PO'
         DC    X'0080',C'GS'
         DC    X'0040',C'TX'
         DC    X'0020',C'TQ'
         DC    X'0008',C'AM'       VSAM
         DC    X'0004',C'TR'
         DC    X'0000',C'UN'
         DC    F'0'                END OF TABLE
RECFMTBL DS    0X
         DC    X'C0',C'U   '
         DC    X'80',C'F   '
         DC    X'40',C'V   '
         DC    X'20',C'  T '
         DC    X'10',C' B  '
         DC    X'08',C'  S '
         DC    X'04',C'   A'
         DC    X'02',C'   M'
         DC    XL5'0'              END OF TABLE
STABTAB  DS    0X
         DC    X'10',CL7'PRIVATE'
         DC    X'08',CL7'PUBLIC'
         DC    X'04',CL7'STORAGE'
         SPACE 4
* VOLRMSG  DC    CL30' '             CCCC,TTTT,AAAA/CCCC,TTTT
ON       EQU   X'F0'
OPEN     EQU   X'10'
SW       DC    X'00'
VMODE    EQU   X'80'
IMODE    EQU   X'40'
DMODE    EQU   X'20'
MSS      EQU   X'10'
*        EQU   X'08'
*        EQU   X'04'
MODE2    EQU   X'02'
MODE1    EQU   X'01'
DW       DC    D'0'
TOT#DSN  DC    F'0'
TOT#TRK  DC    F'0'
TOT#USE  DC    F'0'
HT1      DC    CL16' ',82C'-',CL23' '
TOTSECT  DS    CL30
TOTDSN   DS    CL8
         DS    CL19
TOTCNT   DS    CL8
         DS    CL8
TOTUSE   DS    CL8
         DS    CL9
TOTPCT   DS    CL5
DSCB1A   DC    140X'00'
         DC    0F
UCBA     DC    48X'00'
PREXLS   DC    A(SYSEXIT)
SYSPR    DCB   DDNAME=SYSPRINT,MACRF=PL,DSORG=PS,RECFM=FBA,            *
               LRECL=121,EXLST=PREXLS,DCBE=PRTDCBE
LENPRNT  EQU   *-SYSPR
OPENMOD  OPEN  (,(OUTPUT)),MF=L,MODE=31
OPENLNG  EQU   *-OPENMOD
CLOSMOD  CLOSE (,),MF=L,MODE=31
CLOSLNG  EQU   *-CLOSMOD
RDJFMOD  RDJFCB IEFRD,MF=L
RDJFLNG  EQU   *-RDJFMOD
IEFRD    DCB   DDNAME=IEFRDER,MACRF=(E),IOBAD=IOB1A,EXLST=EXITRDR
LENRDR   EQU   *-IEFRD
EXITRDR  DS    F
IOB1A    DC    6D'0'
PRTDCBE  DCBE  RMODE31=BUFF,SYNAD=SYSERR2
         EJECT
IOASECT  DSECT
SYSPRINT DS    XL(LENPRNT)        24-BIT COPY OF DCB
SYSEX    DS    X                  EXIT LIST CONTROL BYTE
SYSEXL   DS    AL3                ADDRESS OF 24-BIT EXIT CODE
SYSEXT   DS    XL(LENEXIT)        OPEN EXIT CODE
ADOPEN31 DS    A                  ADDRESS OF 31-BIT EXIT CODE
OPENLST  DS    XL(OPENLNG)        OPEN MACRO CODE
CLOSLST  DS    XL(CLOSLNG)        CLOSE MACRO CODE
RDJFLST  DS    XL(RDJFLNG)        READ JFCB MACRO CODE
IEFRDER  DS    XL(LENRDR)
EXIT1    DC    X'87'
EXIT1A   DC    AL3(JFCB1)
JFCB1    DC    176X'00'
IOB1     DC    6D'0'
CP1      DS    CL(LCP1A)
SECR0    DC    X'00'
SECR1    DC    X'00'
DSCB1    DC    140X'00'
ECB1     DC    F'0'
IOALNG   EQU   *-IOASECT
         SPACE 2
* VOLDSECT DSECT
* VOLREPLY DC    CL30' '             CCCC,TTTT,AAAA/CCCC,TTTT
         SPACE 2
VOLDSECT LSPACE MF=(D,DATA)
VOLSER   DC    CL6' '              VOLUME SERIAL
VOLSTAB  DC    X'00'               STATUS
VOLDMCT  DC    X'00'               USE
VOLNAME  DC    CL4' '              UNIT NAME
VOLNGH   EQU   *-VOLDSECT
INXSECT  DSECT
LLINK    DC    A(0)                LEFT LINK FIELD
RLINK    DC    A(0)                RIGHT LINK
INDEX    DC    CL8' '              HIGHEST LEVEL QUALIFIER
IALLOC   DC    F'0'                TOTAL TRACKS
IUSED    DC    F'0'                TOTAL IN USE
ICOUNT   DC    H'0',H'0'           DATASET COUNT,FILLER
ILNGH    EQU   *-INXSECT
         SPACE 2
DSNSECT  DSECT
DSNAME   DC    CL44' '             DATASET NAME
DSVOL    DC    CL6' '              VOLUME SERIAL
DSALLOC  DC    H'0'                TOTAL TRACKS
DSUSED   DC    H'0'                TOTAL TRACKS
DSORG    DC    H'0'                DATASET ORGANIZATION
DSRECFM  DC    H'0'
DSLRECL  DC    H'0'
DSBLKSIZ DC    H'0'
DSCREDT  DC    XL3'00'             YDD BINARY
DSREFDT  DC    XL3'00'             YDD BINARY
DS#EXTS  DC    X'00'               NUMBER OF EXTENTS THIS VOL
DSNLNGH  EQU   *-DSNSECT
         SPACE 2
VLINE    DSECT
         DS    CL10
VVOL     DS    CL6,CL5
VUNIT    DS    CL4,CL5
VUSE     DS    CL7,CL6
VFRCYL   DS    CL6,CL1
VFRTRK   DS    CL6,CL9
V#EXT    DS    CL4,CL10,CL4
VLARGC   DS    CL6,CL1
VLARGT   DS    CL6
         SPACE 2
ILINE    DSECT
         DS    CL16
IINX     DS    CL8,CL7,CL4
I#DSN    DS    CL3,CL19
I#TRK    DS    CL8,CL8
I#USED   DS    CL8,CL8
IPCT     DS    CL5
         SPACE 2
DLINE    DSECT
         DS    CL2
DVOL     DS    CL6,CL1
DALLOC   DS    CL5
DUSED    DS    CL5,CL2
DDSORG   DS    CL2,CL1
DRECFM   DS    CL4
DLRECL   DS    CL5,CL1
DBLKSIZ  DS    CL5,CL1
*#EXT    DS    CL2,CL1
D#EXT    DS    CL2
*CREDT   DS    CL6,CL1
DCREDT   DS    CL7
DREFDT   DS    CL7,CL1
DDSN     DS    CL44,CL2
DMISC    DS    CL20
         SPACE 2
FMT1     DSECT
         IECSDSL1  (1)
FMT4     DSECT
         IECSDSL1  (4)
         DCBD  DSORG=PS
MCKRECRD DSECT
         COPY HSMMCK
         COPY HSMMCA
         COPY HSMMCD
         IEZDEB
         IEZIOB
         IKJTCB  SYS=AOS2                         WAS SYS=AOS1 FOR VS1
UCB      DSECT
         IEFUCBOB
         UCBTYPES LIST=YES
JFCB     DSECT
         IEFJFCBN LIST=YES
TIOT     DSECT
         IEFTIOT1
         END
